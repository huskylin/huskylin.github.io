{"meta":{"title":"工程師都是中二病","subtitle":"","description":"","author":"huksylin","url":"https://huskylin.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-06-14T10:03:11.000Z","updated":"2020-06-14T10:03:54.267Z","comments":true,"path":"tags/index.html","permalink":"https://huskylin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在Node.JS透過ODBC連接impala完整教學(下)","slug":"在Node-JS透過ODBC連接Impala完整教學-下","date":"2020-06-17T10:00:22.000Z","updated":"2020-06-17T14:52:57.020Z","comments":true,"path":"2020/06/17/在Node-JS透過ODBC連接Impala完整教學-下/","link":"","permalink":"https://huskylin.github.io/2020/06/17/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8B/","excerpt":"","text":"在Node.JS透過ODBC連接Impala完整教學(下)步驟二，在 Node.js 上連接到 Ubuntu 上的 ODBC上一篇完成了在 Ubuntu 上安裝 ODBC Driver的部分接下來就是透過 Node.js來連接啦 1. 安裝套件看了一下 Node.js 連接 ODBC的 相關套件這套是到近期都還有有維持更新的，因此採用node-odbc 1npm install odbc 2. 設定連接官方範例 1234567891011121314151617const odbc = require('odbc');async function connectToDatabase() &#123; const connection1 = await odbc.connect('DSN=MYDSN'); // connection1 is now an open Connection // or using a configuration object const connectionConfig = &#123; connectionString: 'DSN=MYDSN', connectionTimeout: 10, loginTimeout: 10, &#125; const connection2 = await odbc.connect(connectionConfig); // connection2 is now an open Connection&#125;connectToDatabase(); 這邊比較要注意的是connectionString: &#39;DSN=MYDSN&#39;這個DSN就是Data Source Name如果是按照上一篇的範例，我們是取名為impalaodbc所以會長這樣 12345const connectionConfig = &#123; connectionString: 'DSN=impalaodbc', connectionTimeout: 10, loginTimeout: 10, &#125; 3. 執行 Query執行 Query、Pool 可以在官方文件上查詢 API 與範例這個套件的官方文件 API 寫得蠻清楚的主要可以在上面看但是值得注意的是Impala 的欄位名稱是不分大小寫的Impala 的欄位名稱是不分大小寫的Impala 的欄位名稱是不分大小寫的 Impala identifiers are always case-insensitive. That is, tables named t1 and T1 always refer to the same table, regardless of quote characters. Internally, Impala always folds all specified table and column names to lowercase. This is why the column headers in query output are always displayed in lowercase.官方文件說明 像我是從MySQL轉移過來的就會遇到問題所以我寫了一個取代欄位名稱的 Function第一個參數是從Impala撈回來的資料第二個參數則是你希望取代的欄位名稱例如: [&#39;Id&#39;, &#39;InfoDate&#39;, &#39;ColName&#39;, &#39;Something&#39;...]直接取代每一個物件的key 12345678910111213141516171819function toCaseSensitiveKeys(result, newKeys) &#123; // make keys array to keys object const replacements = &#123;&#125;; if (newKeys !== undefined) &#123; newKeys.forEach(key =&gt; &#123; replacements[key.toLowerCase()] = key; &#125;) &#125; // pair keys by replacements object const data = result.map(row =&gt; &#123; const replacedItems = Object.keys(row).map(key =&gt; &#123; const newKey = replacements[key] || key; return &#123; [newKey]: row[key] &#125;; &#125;) const newResult = replacedItems.reduce((a, b) =&gt; Object.assign(&#123;&#125;, a, b)); return newResult; &#125;); return data;&#125; 最後的 Query Function 12345678910111213141516171819202122232425262728293031323334353637383940const impalaQuery = (sql, values, newKeys) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; // Create Connection Pool const connectionConfig = &#123; connectionString: 'DSN=impalaodbc', connectionTimeout: 10, loginTimeout: 10, &#125; odbc.connect(connectionConfig, (conError, connection) =&gt; &#123; if (conError) &#123; reject(conError); &#125; connection.query(sql, values, (err, rows) =&gt; &#123; if (err) &#123; // If execute SQL faild, print SQL connection.createStatement((error1, statement) =&gt; &#123; if (error1) &#123; console.log(error1, statement); return; &#125; // handle statement.prepare(sql, (error2) =&gt; &#123; if (error2) &#123; console.log(error2, statement); return; &#125; // handle statement.bind(values, (error3) =&gt; &#123; if (error3) &#123; console.log(error3, statement); return; &#125; // handle &#125;); &#125;); &#125;); reject(err); &#125; else &#123; const idx = rows.indexOf('statement') const values = rows.slice(0, idx).map((e, i) =&gt; &#123; return e &#125;) const data = toCaseSensitiveKeys(values, newKeys); // print SQL console.log(rows['statement']); resolve(data); &#125; &#125;); &#125;); &#125;);&#125;; 主要是加入了 錯誤時透過階段來偵錯 印出執行的SQL 轉換大小寫 在其他地方就可以這樣使用 1234567891011const sql = 'yourSQL';const values = [SomeParms...];const keys = [SomeColNames...];impalaQuery(sql, values, keys) .then(results =&gt; &#123; res.status(200).json(results); &#125;) .catch(err =&gt; &#123; console.log(err); res.status(500).send('DB Error'); &#125;); 這次的在Node.JS透過ODBC連接Impala就大功告成啦!其實蠻費工的，寫這篇文時也回顧了不少苦難希望可以幫助到有同樣需求的人~","categories":[],"tags":[{"name":"部屬","slug":"部屬","permalink":"https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"},{"name":"Node.js","slug":"Node-js","permalink":"https://huskylin.github.io/tags/Node-js/"},{"name":"impala","slug":"impala","permalink":"https://huskylin.github.io/tags/impala/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://huskylin.github.io/tags/ubuntu/"},{"name":"hadoop","slug":"hadoop","permalink":"https://huskylin.github.io/tags/hadoop/"}]},{"title":"在Node.JS透過ODBC連接impala完整教學(上)","slug":"在Node-JS透過ODBC連接Impala完整教學-上","date":"2020-06-15T10:00:22.000Z","updated":"2020-06-17T14:52:28.812Z","comments":true,"path":"2020/06/15/在Node-JS透過ODBC連接Impala完整教學-上/","link":"","permalink":"https://huskylin.github.io/2020/06/15/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8A/","excerpt":"","text":"在Node.JS透過ODBC連接Impala完整教學(上)背景原本專案的後端，在開發階段時採用Node.js連接MySQL結果後來到部屬階段時要改連接到impala原本以為是小事一樁，後來採坑連連於是產生了本篇筆記 初始想法 node-impala 套件一開始看到 npm 裡面已經有人做好套件了連接範例看起來也蠻簡潔的就直接採用 node-impala測試後的確也蠻快就能夠連上並且撈取資料但是!!過很久之後才發現他的query一次最多回傳1024筆結果!他的query一次最多回傳1024筆結果!他的query一次最多回傳1024筆結果! 看了issue後才發現是因為底層使用Beeswax來連接，這是Beeswax的限制無法改變 Beeswax limits the query result. It is not possible to increase the size by setting fetch_size here. Let’s use the HiveServer2 #4. 🙈 原討論串 煎熬了一陣子後決定直接放棄另尋他路 解法 ODBC後來找到的方法是在系統環境下先裝好 ODBC 來連接 Impala後端 Node.js 再去連 ODBC我們的作業系統環境是使用Ubuntu 18.04所以接下來就是有兩個步驟要執行 在 Ubuntu 上安裝 ODBC Driver 在 Node.js 上連接到 Ubuntu 上的 ODBC 步驟一，在 Ubuntu 上安裝 ODBC Driver1. 下載安裝包cloudera下載連結Cloudera ODBC Driver for Impala 官方文件說明 2. 設定環境變數12345export LD_LIBRARY_PATH=/usr/local/lib:/opt/cloudera/impalaodbc/lib/64export CLOUDERAIMPALAINI=/opt/cloudera/impalaodbc/lib/64/cloudera.impalaodbc.iniexport LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libodbcinst.soexport ODBCINI=/etc/odbc.iniexport ODBCSYSINI=/etc 3. 設定 ODBC driver 的參數檔大致上長這樣比較需要注意的地方是 [impalaodbc] 這是你自己要取的 Data Source Name PORT要注意一下是21050還是21000 `Drive‵路徑 帳號密碼、DB位置等等其他都是預設值而已，自行參考變化即可123456789101112131415161718192021222324252627282930313233343536373839[impalaodbc]# Description: DSN Description. This key is not necessary and is only to give a description of the data# source.Description=Cloudera ODBC Driver for Impala (64-bit) DSN# Driver: The location where the ODBC driver is installed to.Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so# The DriverUnicodeEncoding setting is only used for SimbaDM When set to 1, SimbaDM runs in UTF-16 mode. When#set to 2, SimbaDM runs in UTF-8 mode. DriverUnicodeEncoding=2# Values for HOST, PORT, KrbFQDN, and KrbServiceName should be set here. They can also be specified on the# connection string.HOST=Impala Server的IP位置PORT=21050Database=DB名稱# The authentication mechanism. 0 - no authentication. 1 - Kerberos authentication 2 - Username# authentication. 3 - Username/password authentication. 4 - Username/password authentication with SSL.AuthMech=0# Kerberos related settings.KrbFQDN=KrbRealm=KrbServiceName=# Username/password authentication with SSL settings.UID=DB帳號PWD=DB密碼CAIssuedCertNamesMismatch=1TrustedCerts=/opt/cloudera/impalaodbc/lib/64/cacerts.pem# Specify the proxy user ID to use. DelegationUID=# General settingsTSaslTransportBufSize=1000RowsFetchedPerBlock=1000SocketTimeout=0 4. 安裝 unixODBC1sudo apt-get install unixODBC unixODBC-dev 5. 測試 查看你的ODBC設定 1odbcinst -q -s 如果成功的話應該會顯示你的 Data Source Name 測試連線 1isql -v impalaodbc 如果成功的話應該會顯示你的連線後介面 到這部分完成了在 Ubuntu 上安裝 ODBC Driver\\ 恭喜恭喜 / \\ 灑花灑花/喘口氣，下一篇再來講 步驟二 Node.js 的部分~ 參考連結 Installing Impala ODBC Driver in Ubuntu 64 bit Impala ODBC 安装笔记 ubuntu14.04配置impala的odbc连接","categories":[],"tags":[{"name":"部屬","slug":"部屬","permalink":"https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"},{"name":"Node.js","slug":"Node-js","permalink":"https://huskylin.github.io/tags/Node-js/"},{"name":"impala","slug":"impala","permalink":"https://huskylin.github.io/tags/impala/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://huskylin.github.io/tags/ubuntu/"},{"name":"hadoop","slug":"hadoop","permalink":"https://huskylin.github.io/tags/hadoop/"}]},{"title":"Ubuntu Server 18.04 離線狀態下安裝 MySQL","slug":"Ubuntu-Server-18-04-離線狀態下安裝-MySQL","date":"2019-07-16T03:35:15.000Z","updated":"2020-06-16T03:46:11.270Z","comments":true,"path":"2019/07/16/Ubuntu-Server-18-04-離線狀態下安裝-MySQL/","link":"","permalink":"https://huskylin.github.io/2019/07/16/Ubuntu-Server-18-04-%E9%9B%A2%E7%B7%9A%E7%8B%80%E6%85%8B%E4%B8%8B%E5%AE%89%E8%A3%9D-MySQL/","excerpt":"","text":"在 Ubuntu Server 18.04 離線狀態下安裝 MySQL (Install MySQL on Ubuntu While Offline)背景最近一個專案遇到的情況，基於資安政策考量，規定機器不能連外部網路這樣就不能直接使用sudo apt-get install mysql-serve來安裝過程蠻不方便的，記錄一下給遇到同樣處境的人。作法主要參考了這篇文章: ubuntu16.04 安装离线 mysql5.7.17但是MySQL 8.0 版本與以前的版本安裝步驟略有不同，會在以下內容中提到 準備安裝包1. 下載對應的 MySQL 安裝包本文以Ubuntu Linux 18.04 (x86, 64-bit), DEB Bundle為例 2. 準備 USB檢查一下裡面包含這些檔案把mysql-server_8.0.16–2ubuntu18.04_amd64.deb-bundle.tar放置到 USB 隨身碟裝置中 註記: 這邊 USB 要先在 Ubuntu 環境中測試看看能不能用，有些需要重新格式化 掛載 USB 隨身碟1. 先查 USB 隨身碟是被系統辨識成那個裝置fdisk -lsda 很可能是硬碟,往下查容量可以找到隨身碟的編號我們假設為 sdb 2. 建立 USB 隨身碟的掛載點：mkdir /mnt/usb 3. 掛載 USB 隨身碟mount -v -t auto /dev/sdb /mnt/usb -v 顯示資訊-t auto 讓系統自動分辯檔案系統 4. 到 /mnt/usb 可看到 usb 的內容解壓縮後檢視一下檔案 註記: 檔名多一個(1)的部份是我有重新下載過第一次下載時不知道是不是檔案有毀損，出現異常錯誤如果有遇到也可以試試看重新下載 開始安裝1. 下載依賴的安裝包根據參考文章，還需要兩個額外依賴包，可以在這邊下載https://pkgs.org/download/libaio1https://pkgs.org/download/libmecab2 2. 安裝 MySQL sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg-preconfigure mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb(這步驟會跳出安裝畫面，並且需要輸入 root 密碼) sudo dpkg -i libmysqlclient21_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i libmysqlclient-dev_8.0.16–2ubuntu18.04_amd64.deb 參考文章中這一步是安裝libmysqld-dev_5.7.16–1ubuntu16.04_amd64.deb但是根據官方版本資訊，8.0 版本已經不需要這個檔案了，所以不需要做這個步驟 參考文章中的這步驟是安裝mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb所以執行sudo dpkg -i mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i mysql-client_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb 參考文章中的這步驟是安裝mysql-community-server_8.0.16–2ubuntu18.04_amd64.de不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb所以執行sudo dpkg -i mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb sudo dpkg -i mysql-server_8.0.16–2ubuntu18.04_amd64.deb打完這一大坨指令後，就大功告成啦!最後可以去 MySQL 裡面試一下指令，確認安裝結果mysql -u root -p","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://huskylin.github.io/tags/Ubuntu/"},{"name":"部屬","slug":"部屬","permalink":"https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"},{"name":"MySQL","slug":"MySQL","permalink":"https://huskylin.github.io/tags/MySQL/"}]},{"title":"Leaflet讀取GeoJSON檔","slug":"Leaflet讀取GeoJSON檔","date":"2018-10-07T10:00:22.000Z","updated":"2020-06-14T10:12:53.930Z","comments":true,"path":"2018/10/07/Leaflet讀取GeoJSON檔/","link":"","permalink":"https://huskylin.github.io/2018/10/07/Leaflet%E8%AE%80%E5%8F%96GeoJSON%E6%AA%94/","excerpt":"","text":"Leaflet 讀取 GeoJSON 檔透過在地圖上把台灣縣市地區框選起來並且點擊後會有 popup 提示該地區的縣市名稱練習 Leaflet 的一些操作 起步先照著官網教學引入相關文件把初始地圖建出來https://leafletjs.com/examples/quick-start/ 12345678// 建立 Leaflet 地圖var map = L.map(\"mapid\");// 設定經緯度座標map.setView(new L.LatLng(25, 121.74739), 13);// 設定圖資來源var osmUrl = \"https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png\";var osm = new L.TileLayer(osmUrl, &#123; minZoom: 3, maxZoom: 16 &#125;);map.addLayer(osm); 讀入 GeoJSON 檔根據Web 視覺化(四)：建立 OpenStreetMap 地圖提到 Leaflet 無法直接讀取 GeoJSON 檔案，必須先透過 Ajax 等方式下載下來才行。這邊將使用 jQuery 做例子 123$.getJSON(\"YOURFILE.json\", function (r) &#123; L.geoJSON(r, &#123; color: \"#333\" &#125;).addTo(map);&#125;); 這樣就可以讀取 geoJSON 替區塊著色希望讓不同區塊有不同顏色這邊試做一個，把新北市著色 1234567891011121314$.getJSON(\"taiwan.json\", function (r) &#123; L.geoJSON(r, &#123; // 樣式可透過function操作 style: function (feature) &#123; if (feature.properties.COUNTYID == 65) &#123; console.log(feature.properties.NAME_2014); return &#123; color: \"#4f45c0\" &#125;; &#125; else &#123; return &#123; color: \"#444444\" &#125;; &#125; &#125;, onEachFeature: onEachFeature, &#125;).addTo(map);&#125;); 點擊區塊彈出提示這邊希望該縣市區塊後會彈出提示的視窗這邊的 NAME_2014 是該資料中的 properties 有這個 NAME_2014 屬性裡面是該縣市地區的名字 123456// 綁定每個feature做Popup，可以視資料有什麼properties來決定function onEachFeature(feature, layer) &#123; if (feature.properties &amp;&amp; feature.properties.NAME_2014) &#123; layer.bindPopup(feature.properties.NAME_2014); &#125;&#125; 另外再加入官網範例中點地圖的其他位置後顯示座標位置 12345678var popup = L.popup();function onMapClick(e) &#123; popup .setLatLng(e.latlng) .setContent(\"You clicked the map at \" + e.latlng.toString()) .openOn(map);&#125;map.on(\"click\", onMapClick); 其他延伸如果想要自己繪製可以使用geojson.io的服務 資料來源中華民國縣市的 geojson 檔Leaflet 對 GeoJSON 的官方說明老外教學影片","categories":[],"tags":[{"name":"Leaflet","slug":"Leaflet","permalink":"https://huskylin.github.io/tags/Leaflet/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://huskylin.github.io/tags/JavaScript/"}]},{"title":"CSS放大圖片會爆框","slug":"CSS放大圖片會爆框","date":"2018-09-01T10:08:02.000Z","updated":"2020-06-14T10:12:43.513Z","comments":true,"path":"2018/09/01/CSS放大圖片會爆框/","link":"","permalink":"https://huskylin.github.io/2018/09/01/CSS%E6%94%BE%E5%A4%A7%E5%9C%96%E7%89%87%E6%9C%83%E7%88%86%E6%A1%86/","excerpt":"","text":"初步想法想要實作一個滑鼠放上去時會放大圖片簡單的效果使用到的技巧 :hover Selectors(選擇器)用來選擇滑鼠指標經過在上面時的元素 transform: scale()transform 屬性裡，用來縮放元素大小 這兩個加起來就可以做出上述的效果不過被選擇到放大後的圖片會爆出框框這時候就需要加上overflow: hidden當超出邊界範圍時，將多餘的部分隱藏起來不顯示 問題原本以為到這邊就可以成功將效果呈現但是卻發現會因為 padding 的間距讓圖片放大的範圍有了”亂長大的空間” 解決後來在圖片外面多包一個 div並將 overflow: hidden 寫在裡面文字與圖片間的 padding 就不會給圖片亂長大的空間了 1234567891011.col-grid &#123; max-width: 450px; overflow: hidden; img &#123; max-width: 450px; &amp;:hover &#123; transform: scale(1.1); transition: 0.5s; &#125; &#125;&#125; 結果左邊為目標效果，右邊是有非預期爆框的效果","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://huskylin.github.io/tags/CSS/"}]},{"title":"用Python打造FB抽獎機，將回覆留言也列入參抽獎單","slug":"用Python打造FB抽獎機，將回覆留言也列入參抽獎單","date":"2018-05-13T10:11:47.000Z","updated":"2020-06-14T11:23:50.492Z","comments":true,"path":"2018/05/13/用Python打造FB抽獎機，將回覆留言也列入參抽獎單/","link":"","permalink":"https://huskylin.github.io/2018/05/13/%E7%94%A8Python%E6%89%93%E9%80%A0FB%E6%8A%BD%E7%8D%8E%E6%A9%9F%EF%BC%8C%E5%B0%87%E5%9B%9E%E8%A6%86%E7%95%99%E8%A8%80%E4%B9%9F%E5%88%97%E5%85%A5%E5%8F%83%E6%8A%BD%E7%8D%8E%E5%96%AE/","excerpt":"","text":"動機最近在臉書上參加活動需要朋友們按讚我就辦了個抽獎讓大家參與搜尋一下線上工具搜尋結果前幾個似乎都無法免費支援個人頁面的抽獎 影片教學剛好之前看到Pycone 松果城市有相關的教學影片看上去不會太複雜，就照著實作一次了 前就如影片所示 取得 Post 的 ID Facebook Graph API 取得 Token (存取權杖) 拿到資料 不過做到中間發現 這個教學也是做給粉絲團使用的 我希望讓留言中回覆的人也加入名單 所以需要修改一下 取得留言的回覆由於 Facebook 的巢狀留言結構每個留言也都有各自獨立的 ID要一一抓取有點麻煩這邊直接在語法的地方使用 filter=stream 讓它變成資料流，就會全部展開來了 另外如果留言數太多的話還要加上 limit否則有些會顯示不出來想要全部顯，就給一個超過總留言數的數量即可 limit=1000 最後的語法為 &lt;Your_Post_ID&gt;/comments?filter=stream&amp;limit=1000 最後取得資料後再利用 SET 去除重複名單，亂數排序後印出就可以完成了 完整的程式碼短短幾行就可以完成了","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://huskylin.github.io/tags/Python/"}]}],"categories":[],"tags":[{"name":"部屬","slug":"部屬","permalink":"https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"},{"name":"Node.js","slug":"Node-js","permalink":"https://huskylin.github.io/tags/Node-js/"},{"name":"impala","slug":"impala","permalink":"https://huskylin.github.io/tags/impala/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://huskylin.github.io/tags/ubuntu/"},{"name":"hadoop","slug":"hadoop","permalink":"https://huskylin.github.io/tags/hadoop/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://huskylin.github.io/tags/Ubuntu/"},{"name":"MySQL","slug":"MySQL","permalink":"https://huskylin.github.io/tags/MySQL/"},{"name":"Leaflet","slug":"Leaflet","permalink":"https://huskylin.github.io/tags/Leaflet/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://huskylin.github.io/tags/JavaScript/"},{"name":"CSS","slug":"CSS","permalink":"https://huskylin.github.io/tags/CSS/"},{"name":"Python","slug":"Python","permalink":"https://huskylin.github.io/tags/Python/"}]}