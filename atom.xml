<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工程師都是中二病</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huskylin.github.io/"/>
  <updated>2020-10-20T16:40:46.107Z</updated>
  <id>https://huskylin.github.io/</id>
  
  <author>
    <name>huskylin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis 做資料快取的基本使用 (搭配Node.js)</title>
    <link href="https://huskylin.github.io/2020/07/10/Redis-%E5%81%9A%E8%B3%87%E6%96%99%E5%BF%AB%E5%8F%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E9%85%8DNode-js/"/>
    <id>https://huskylin.github.io/2020/07/10/Redis-%E5%81%9A%E8%B3%87%E6%96%99%E5%BF%AB%E5%8F%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E9%85%8DNode-js/</id>
    <published>2020-07-10T10:11:48.000Z</published>
    <updated>2020-10-20T16:40:46.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-做資料快取的基本使用-搭配Node-js"><a href="#Redis-做資料快取的基本使用-搭配Node-js" class="headerlink" title="Redis 做資料快取的基本使用 (搭配Node.js)"></a>Redis 做資料快取的基本使用 (搭配Node.js)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有些需要耗費大量運算的結果<br>如果能夠在伺服器端做快取<br>可以對效能提升很有幫助<br>先看這次的結果<br><img src="https://i.imgur.com/cauSYoG.png" alt=""><br>左邊為原始情況，右邊為 Redis 快取後<br>(極端案例? T__T</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>已經有安裝<br>或是只是想看介紹的可以跳過這部分喔~</p><h3 id="Redis-Server"><a href="#Redis-Server" class="headerlink" title="Redis Server"></a>Redis Server</h3><p>建議採用官網這種下載壓縮檔再安裝的方式<br>不然直接用 apt-get 常常預設的不是最新版本<br><a href="https://redis.io/download#installation" target="_blank" rel="noopener">https://redis.io/download#installation</a></p><pre><code class="Bash">$ wget http://download.redis.io/releases/redis-6.0.5.tar.gz$ tar xzf redis-6.0.5.tar.gz$ cd redis-6.0.5$ make</code></pre><p>在背景啟動 redis-server</p><pre><code class="Bash">$ src/redis-server --daemonize yes</code></pre><p>並且測試一下功能運作正常</p><pre><code class="Bash">$ redis&gt; set foo bar$ OK$ redis&gt; get foo$ &quot;bar&quot;</code></pre><h3 id="Redis-Client"><a href="#Redis-Client" class="headerlink" title="Redis Client"></a>Redis Client</h3><p>我自己是使用 Node.js<br>所以先安裝 node-redis 套件<br><a href="https://github.com/NodeRedis/node-redis" target="_blank" rel="noopener">https://github.com/NodeRedis/node-redis</a></p><pre><code class="Bash">npm install redis</code></pre><p>Github 上的範例也很簡潔清楚</p><pre><code class="JavaScript">&lt;!-- 引入模組 --&gt;const redis = require(&quot;redis&quot;);const client = redis.createClient();&lt;!-- 連接 redis server --&gt;client.on(&quot;error&quot;, function(error) {  console.error(error);});&lt;!-- 設置與取得 key / value --&gt;client.set(&quot;key&quot;, &quot;value&quot;, redis.print);client.get(&quot;key&quot;, redis.print);</code></pre><h2 id="實際使用"><a href="#實際使用" class="headerlink" title="實際使用"></a>實際使用</h2><h3 id="使用快取的邏輯"><a href="#使用快取的邏輯" class="headerlink" title="使用快取的邏輯"></a>使用快取的邏輯</h3><ul><li>查詢資料時，查看是否存在於快取之中<ul><li>是，則<strong>從快取中取得</strong>資料<ul><li>直接回傳給前端</li></ul></li><li>否，則<strong>從資料庫中</strong>查詢<ul><li>回傳給前端</li><li>並且寫入快取之中</li></ul></li></ul></li><li>更新資料時，查看是否存在於快取之中<ul><li>是，則一併更新快取資料</li><li>否，則寫入快取中<h3 id="轉換為程式碼"><a href="#轉換為程式碼" class="headerlink" title="轉換為程式碼"></a>轉換為程式碼</h3></li></ul></li></ul><pre><code class="Javascript">// 取得圖表資料router.get(&#39;/someData&#39;, (req, res) =&gt; {  // 取得請求參數並傳換成 key  const parm1 = req.query.parm1  const parm2 = req.query.parm2  const parm3 = req.query.parm3  const key = (`someData:${parm1}/${parm2}/${parm3}`).trim()  const expireDay = 60 * 60 * 24;  // 檢查資料是否能夠從快取中取得  redisClient.get(key, (err, rawdata) =&gt; {    // 可以做錯誤處理    if (err) {      console.log(err)    }    // 如果快取中沒有這筆資料，會回傳 null     if (!!rawdata) {      // redis 無法儲存 Javascript 的 Object      // 這邊是直接存成 string      // 所以需要轉換      const data = JSON.parse(rawdata);      return res.json(data);    }    // 這邊是呼叫你撈資料庫的 function    yourSQL.queryData(parm1, parm2, parm3)      .then(results =&gt; {        // 寫入快取，並且設置有效期限為一天        redisClient.set(key, JSON.stringify(results), &#39;EX&#39;, expireDay, err =&gt; {          if (err) {            console.log(err)          }        });        // 回傳資料        res.json(results);      })      .catch(err =&gt; {        // 資料庫的查詢的錯誤處理        console.log(&quot;not connected due to error: &quot; + err);        res.status(500).send(&#39;Can not connect to DB&#39;);      });  });});</code></pre><h2 id="值得注意的地方"><a href="#值得注意的地方" class="headerlink" title="值得注意的地方"></a>值得注意的地方</h2><h3 id="key-的取名"><a href="#key-的取名" class="headerlink" title="key 的取名"></a>key 的取名</h3><p>因為 key 的長度會影響到 Redis 查詢的效能<br>所以設計好的 key 是需要的<br>關乎取名的東西要複雜都可以很複雜<br>但我覺得最大原則就是內部溝通好、好管理就好<br>可以參考 SatckOverflow 上有人講到常見的命名方式<br><a href="https://stackoverflow.com/questions/6965451/redis-key-naming-conventions" target="_blank" rel="noopener">redis-key-naming-conventions</a></p><blockquote><p>We use a colon (:) as namespace separator and a hash (#) for id-parts of keys, e.g.:<br>logistics:building#23</p></blockquote><h3 id="value-的資料型態"><a href="#value-的資料型態" class="headerlink" title="value 的資料型態"></a>value 的資料型態</h3><p>Redis 目前有五種資料型態:</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset (sorted set)</li></ul><p>我這邊原本是想直接把資料庫撈出來的結果 (Object型態) 存入<br>但是因為 Redis 並沒有這種資料型態<br>所以就直接粗暴的轉成字串<br>存入與取出時透過<code>JSON.stringify</code>, <code>JSON.parse</code> 來處理<br><img src="https://media.giphy.com/media/3oEduNF7DlpxgcHVJe/giphy.gif" alt=""><br>應該有更好的做法啦</p><h3 id="有效期限的設置"><a href="#有效期限的設置" class="headerlink" title="有效期限的設置"></a>有效期限的設置</h3><ul><li>如果不是需要常駐的資料<br>  盡量都要設置有效期限<br>  (需要常駐的資料也應該要記得存於實體資料庫中)</li><li>設置合理的有效期限<ul><li>太長，占用記憶體空間</li><li>太短，容易重覆讀寫浪費效能</li></ul></li><li>在範例的 Node.js 中<br>  語法為在 set 方法裡傳入參數 <code>&#39;EX&#39;, expire</code><pre><code class="JavaScript">  redisClient.set(key, value, &#39;EX&#39;, expire, err =&gt; {      ...  });</code></pre></li></ul><h3 id="超過記憶體上限後的處理、淘汰機制"><a href="#超過記憶體上限後的處理、淘汰機制" class="headerlink" title="超過記憶體上限後的處理、淘汰機制"></a>超過記憶體上限後的處理、淘汰機制</h3><ul><li>noeviction:<br>  即使記憶體上達到上限，也不置換 key-value<br>  也就是<strong>記憶體滿了之後，只能讀取資料，不能寫入</strong><br>  若再新增資料會 return error<blockquote><p><strong>這是預設值，我認為不適用於多數場合，所應該要去設定成下列其他的</strong></p></blockquote></li><li>allkeys-lru:<br>  優先刪除掉<strong>最近最少使用</strong>的key，用以保存新數據<blockquote><p>LRU = least recently used<br>適用多數場合</p></blockquote></li><li>volatile-lru:<br>  只從有設置<strong>有效期限</strong> (expire) 的資料中<br>  選擇<strong>最近最少使用</strong>的 key-value 進行刪除<blockquote><p>與 allkeys-lru 的差別在於<br>一個從<strong>全部</strong>的 key 中來選擇刪除<br>一個是只會從<strong>有有效期限</strong>的 key 來選擇刪除</p></blockquote></li><li>allkeys-random:<br>  從<strong>全部</strong>的 key 中<br>  <strong>隨機選擇</strong>一些進行刪除</li><li>volatile-random:<br>  只從有設置<strong>有效期限</strong> (expire) key 中<br>  <strong>隨機選擇</strong>一些 key 進行刪除</li><li>volatile-ttl:<br>  只從有設置<strong>有效期限</strong> (expire) key 中<br>  選出<strong>剩餘存活時間 (TTL) 最短</strong>的 key 進行刪除<blockquote><p>TTL = Time To Live</p></blockquote></li></ul><h3 id="其他參考資料"><a href="#其他參考資料" class="headerlink" title="其他參考資料"></a>其他參考資料</h3><ul><li><a href="https://medium.com/10coding/node-js-%E4%BD%BF%E7%94%A8-redis-%E5%85%A7%E5%AD%98%E4%BE%86%E5%AD%98%E5%8F%96%E6%9C%AC%E5%9C%B0%E8%B3%87%E6%96%99-9557660196f4" target="_blank" rel="noopener">[Node.js] 使用 Redis 內存來存取本地資料</a></li><li><a href="https://jinguoxing.github.io/redis/2018/10/10/redis-EXPIRE/" target="_blank" rel="noopener">Redis的过期策略及淘汰策略</a></li><li><a href="https://juejin.im/post/5ed5cc9b51882543393c985c" target="_blank" rel="noopener">Redis删除策略和逐出策略</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis-做資料快取的基本使用-搭配Node-js&quot;&gt;&lt;a href=&quot;#Redis-做資料快取的基本使用-搭配Node-js&quot; class=&quot;headerlink&quot; title=&quot;Redis 做資料快取的基本使用 (搭配Node.js)&quot;&gt;&lt;/a&gt;Redis 
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 在每個群組中取 N 筆資料 ( Get 1...N Results From Each Group )</title>
    <link href="https://huskylin.github.io/2020/06/28/MySQL-%E5%9C%A8%E6%AF%8F%E5%80%8B%E7%BE%A4%E7%B5%84%E4%B8%AD%E5%8F%96-N-%E7%AD%86%E8%B3%87%E6%96%99-Get-1-N-Results-From-Each-Group/"/>
    <id>https://huskylin.github.io/2020/06/28/MySQL-%E5%9C%A8%E6%AF%8F%E5%80%8B%E7%BE%A4%E7%B5%84%E4%B8%AD%E5%8F%96-N-%E7%AD%86%E8%B3%87%E6%96%99-Get-1-N-Results-From-Each-Group/</id>
    <published>2020-06-28T07:27:47.000Z</published>
    <updated>2020-06-28T08:59:40.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-在每個群組中取-N-筆資料-Get-1…N-Results-From-Each-Group"><a href="#MySQL-在每個群組中取-N-筆資料-Get-1…N-Results-From-Each-Group" class="headerlink" title="MySQL 在每個群組中取 N 筆資料 ( Get 1…N Results From Each Group )"></a>MySQL 在每個群組中取 N 筆資料 ( Get 1…N Results From Each Group )</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如果只想撈取 GROUP BY 後，每一個 GROUP 裡面的前 1…n 筆資料<br>例如:</p><table><thead><tr><th>Person</th><th>Height</th><th>Weight</th><th>UpdateTime</th></tr></thead><tbody><tr><td>Andy</td><td>150</td><td>52</td><td>2018-06-01</td></tr><tr><td>Andy</td><td>155</td><td>55</td><td>2019-08-01</td></tr><tr><td>Andy</td><td>160</td><td>58</td><td>2020-09-01</td></tr><tr><td>Bob</td><td>162</td><td>57</td><td>2018-06-01</td></tr><tr><td>Bob</td><td>164</td><td>62</td><td>2019-08-01</td></tr><tr><td>Bob</td><td>168</td><td>65</td><td>2020-09-01</td></tr></tbody></table><p>這是一張記錄身高體重的表<br>而決定每筆資料是唯一的 PK 就是<code>Name + UpdateTime</code></p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>假設想要取得<code>每個人最新的體態資料</code><br>那麼直覺就會想到先把他們 GROUP BY 後<br>再來用 ORDER BY<br>再來用 LIMIT<br>再來用….. 到底要用啥<br>最後腦袋一片渾沌地組出一坨勉強通過語法檢查的式子</p><pre><code class="SQL">SELECT     Person, Height, Weight, UpdateTimeFROM    BodyInfoTable GROUP BY    Person, UpdateTimeORDER BY    UpdateTime DESCLIMIT 1</code></pre><p>然後就可以開開心心地看見…<br><strong>各種錯誤與不是你想要的結果 :)</strong><br><img src="https://media.giphy.com/media/xTeV7FKRuo5YX714L6/giphy.gif" alt=""></p><h2 id="解法一，使用-Variables"><a href="#解法一，使用-Variables" class="headerlink" title="解法一，使用 Variables"></a>解法一，使用 Variables</h2><p>那麼再來就是這次的主題<br><strong>針對每一個 GROUP 取幾筆資料</strong><br>查詢了 StackOverflow 上的問答後的解法<br><a href="https://stackoverflow.com/questions/53373326/using-limit-within-group-by-to-get-n-results-per-dynamic-group" target="_blank" rel="noopener">Using LIMIT within GROUP BY to get N results per dynamic group</a><br><a href="https://stackoverflow.com/a/12005119" target="_blank" rel="noopener">mysql limit inside group</a><br>套用在範例的情境中就會長這樣</p><pre><code class="SQL">SELECT     Person, Height, Weight, UpdateTimeFROM    (SELECT         x.*,            CASE                WHEN @prev = Person THEN @i:=@i + 1                ELSE @i:=1            END i,            @prev:=Person    FROM        BodyInfoTable x, (SELECT @prev:=NULL, @i:=0) vars    ORDER BY Person, UpdateTime ) aWHERE    i &lt;= 1;</code></pre><p>最關鍵的部分就是它使用了<a href="https://dev.mysql.com/doc/refman/8.0/en/user-variables.html" target="_blank" rel="noopener"><code>Variables</code></a>搭配<code>case-when</code>來完成<br>當 Person 欄位重覆的時候 i 就會 +1<br>調整 ORDER BY 與 i &lt;= 多少<br>就可以決定想要按照什麼條件來取得前 n 筆資料了</p><p>Variables 變數:</p><pre><code class="SQL">@prev:=Person</code></pre><blockquote><p>You can <strong>store a value in a user-defined variable</strong> in one statement and refer to it later in another statement. This enables you to pass values from one statement to another. </p></blockquote><h3 id="出現另一個問題"><a href="#出現另一個問題" class="headerlink" title="出現另一個問題"></a>出現另一個問題</h3><p>原本想說大功告成，這長得這麼<del>醜</del>複雜<br>把它儲存成 View 吧<br>登愣<del>~</del> 直接噴出一個大大的錯誤<br><code>Error 1351: View&#39;s SELECT contains a variable or parameter SQL Statement:...</code><br>直接拿錯誤餵狗後才知道<br><strong>View 裡面是不能使用 Variables 的!!</strong><br>如果堅持要用，就必須用<a href="https://stackoverflow.com/a/11294609" target="_blank" rel="noopener">很 tricky 的寫法</a><br>看到這邊…我只能說<br>「我OK，你先用」<br><img src="https://media.giphy.com/media/ANWIS2HYfROI8/giphy.gif" alt=""><br>馬上跳槽用別的寫法</p><h2 id="解法二，使用-ROW-NUMBER"><a href="#解法二，使用-ROW-NUMBER" class="headerlink" title="解法二，使用 ROW_NUMBER()"></a>解法二，使用 ROW_NUMBER()</h2><p>原來這種類型的操作<br>是因為在<code>MySQL 8</code>以前才需要這麼克難、展現手做職人精神<br><code>MySQL 8</code>以後就直接用超棒棒函數就好啦<br><a href="https://stackoverflow.com/a/30269273" target="_blank" rel="noopener">In MySQL 8 or later just use the RANK, DENSE_RANK or ROW_NUMBER functions:</a><br>套用在範例的SQL就會長這樣</p><pre><code class="SQL">SELECT     Person, Height, Weight, UpdateTimeFROM    (    SELECT *,    ROW_NUMBER() OVER (partition by Person ORDER BY Person, UpdateTime) AS vars    FROM TainanParking.GridStatic    ) as aWHERE num &lt;= 1</code></pre><p>撈出來應該就會像是</p><table><thead><tr><th>Person</th><th>Height</th><th>Weight</th><th>UpdateTime</th></tr></thead><tbody><tr><td>Andy</td><td>160</td><td>58</td><td>2020-09-01</td></tr><tr><td>Bob</td><td>168</td><td>65</td><td>2020-09-01</td></tr></tbody></table><p><img src="https://media.giphy.com/media/jrutBd1N7ZhsINAPzs/giphy.gif" alt="OMG"><br>這種寫法真的是好多了<br>而且這個需求應該很常用到，趕緊筆記起來<br>終於打完了~ 下課啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL-在每個群組中取-N-筆資料-Get-1…N-Results-From-Each-Group&quot;&gt;&lt;a href=&quot;#MySQL-在每個群組中取-N-筆資料-Get-1…N-Results-From-Each-Group&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://huskylin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Node.js + PM2 設置環境變數，更彈性地開發與部屬</title>
    <link href="https://huskylin.github.io/2020/06/18/Node-js-PM2-%E8%A8%AD%E7%BD%AE%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%EF%BC%8C%E6%9B%B4%E5%BD%88%E6%80%A7%E5%9C%B0%E9%96%8B%E7%99%BC%E8%88%87%E9%83%A8%E5%B1%AC/"/>
    <id>https://huskylin.github.io/2020/06/18/Node-js-PM2-%E8%A8%AD%E7%BD%AE%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%EF%BC%8C%E6%9B%B4%E5%BD%88%E6%80%A7%E5%9C%B0%E9%96%8B%E7%99%BC%E8%88%87%E9%83%A8%E5%B1%AC/</id>
    <published>2020-06-18T10:10:00.000Z</published>
    <updated>2020-07-18T10:11:22.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-PM2-設置環境變數，更彈性地開發與部屬"><a href="#Node-js-PM2-設置環境變數，更彈性地開發與部屬" class="headerlink" title="Node.js + PM2 設置環境變數，更彈性地開發與部屬"></a>Node.js + PM2 設置環境變數，更彈性地開發與部屬</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用 node.js 時一定會遇到<br><code>開發(dev)</code>與<code>生產(production)</code>，甚至更多階段的不同環境<br>可能每一種環境都有不同的設定檔案<br>例如:<br>開發階段要連線到本機的資料庫<br>生產階段要連線到另一台伺服器的資料庫<br>這時候就需要更彈性的來做設定</p><h2 id="在-Node-js-設定-config"><a href="#在-Node-js-設定-config" class="headerlink" title="在 Node.js 設定 config"></a>在 Node.js 設定 config</h2><p>可以針對不同的階段環境來設定各種連線參數<br>例如:</p><pre><code class="JavaScript">const env = process.env.NODE_ENV; // &#39;dev&#39; or &#39;prod&#39;const configs = {}configs.dev = {  db: {    host: &#39;YourHost1&#39;,    port: 3306,    user: &quot;YourUser&quot;,    password: &#39;yourPassword1&#39;,    database: &#39;YourDB1&#39;  }};configs.prod = {  db: {    host: &#39;YourHost2&#39;,    port: 3306,    user: &quot;YourUser2&quot;,    password: &#39;yourPassword2&#39;,    database: &#39;YourDB2&#39;  }}module.exports = configs[env];</code></pre><p>如此一來 Node.js 就會根據<code>環境變數</code>來 exports 不同的設定</p><h2 id="使用-PM2-來運行-Node-js-時"><a href="#使用-PM2-來運行-Node-js-時" class="headerlink" title="使用 PM2 來運行 Node.js 時"></a>使用 PM2 來運行 Node.js 時</h2><p>PM2 是一個 node 的程序管理器<br>主要功能有<code>自動重啟服務</code>, <code>叢集功能更有效的利用多核CPU</code>等等<br>網路上介紹非常多，可以參考這些連結來看介紹與用法</p><ul><li><a href="https://tn710617.github.io/zh-tw/pm2/" target="_blank" rel="noopener">pm2 - 用法大全</a> </li><li><a href="https://larrylu.blog/nodejs-pm2-cluster-455ffbd7671" target="_blank" rel="noopener">使用 pm2 啟動 Node.js cluster 以提升效能</a></li></ul><p>我主要想分享的是，當我們使用 PM2 時<br><strong>希望在<code>叢集模式(cluster)</code>下運行Node服務，又要設定<code>環境變數</code>時的作法</strong><br>一開始直覺的想法是直接都打在參數</p><ul><li><a href="https://stackoverflow.com/questions/43130494/how-to-npm-start-with-pm2-cluster-mode" target="_blank" rel="noopener">how to “npm start” with pm2 cluster mode</a></li><li><a href="https://stackoverflow.com/questions/33656947/passing-environment-variables-to-node-js-using-pm2" target="_blank" rel="noopener">Passing environment variables to node.js using pm2</a></li></ul><p>後來發現比較好的做法，是設置一個<code>PM2的參數設定檔</code><br>(後來才發現其實官方的文件就寫得很清楚了)</p><h2 id="使用-Ecosystem-File"><a href="#使用-Ecosystem-File" class="headerlink" title="使用 Ecosystem File"></a>使用 Ecosystem File</h2><p><a href="https://pm2.keymetrics.io/docs/usage/environment/" target="_blank" rel="noopener">PM2官方文件</a></p><ol><li>先產生一個<code>ecosystem.config.js</code></li><li>設置範例</li></ol><pre><code class="JavaScript">module.exports = {  apps : [{    name: &quot;app&quot;,    script: &quot;./app.js&quot;,    env: {      NODE_ENV: &quot;development&quot;,    },    env_production: {      NODE_ENV: &quot;production&quot;,    }  }]}</code></pre><ol start="3"><li>運行指令</li></ol><pre><code class="Bash">pm2 start ecosystem.config.js --env production</code></pre><p>這裡值得留意的是<br>在上面的例子中，<code>--env</code>這個參數後面接是<code>production</code>而不是<code>env_production</code><br>我原本想說應該是要輸入設定檔的 Object key<br>結果直接失敗，我還不夠難嗎?<br>差點躺在床上蓋著面被抱著自己哭出來</p><p>後來又發現其實在更下面的官方文件<br>又有說明了</p><blockquote><p>Example:</p><pre><code class="bash"># Inject what is declared in env_productionpm2 start process.json --env production# Inject what is declared in env_stagingpm2 restart process.json --env staging</code></pre></blockquote><p>( 害我不能怪官方沒寫清楚了 )<br>( 改怪他怎麼分那麼開好了 QQ )</p><h2 id="廢話時間"><a href="#廢話時間" class="headerlink" title="廢話時間"></a>廢話時間</h2><p>改造完自己的設置<br>是不是覺得自己的Node.js Server變得更進化啦<br><img src="https://media.giphy.com/media/u1k1kpDZSw5sA/giphy.gif" alt="evolution"><br><strong>進化為 Dev &amp; Production 皆可適應的雙棲動物</strong><br>獻唱一首蔡健雅的雙棲動物</p><blockquote><p>很想哭~　哭完無助~</p></blockquote><p>打完收工!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js-PM2-設置環境變數，更彈性地開發與部屬&quot;&gt;&lt;a href=&quot;#Node-js-PM2-設置環境變數，更彈性地開發與部屬&quot; class=&quot;headerlink&quot; title=&quot;Node.js + PM2 設置環境變數，更彈性地開發與部屬&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>在Node.JS透過ODBC連接impala完整教學(下)</title>
    <link href="https://huskylin.github.io/2020/06/17/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8B/"/>
    <id>https://huskylin.github.io/2020/06/17/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8B/</id>
    <published>2020-06-17T10:00:22.000Z</published>
    <updated>2020-06-28T09:14:55.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Node-JS透過ODBC連接Impala完整教學-下"><a href="#在Node-JS透過ODBC連接Impala完整教學-下" class="headerlink" title="在Node.JS透過ODBC連接Impala完整教學(下)"></a>在Node.JS透過ODBC連接Impala完整教學(下)</h1><h2 id="步驟二，在-Node-js-上連接到-Ubuntu-上的-ODBC"><a href="#步驟二，在-Node-js-上連接到-Ubuntu-上的-ODBC" class="headerlink" title="步驟二，在 Node.js 上連接到 Ubuntu 上的 ODBC"></a>步驟二，在 Node.js 上連接到 Ubuntu 上的 ODBC</h2><p>上一篇完成了<code>在 Ubuntu 上安裝 ODBC Driver</code>的部分<br>接下來就是透過 Node.js來連接啦<br><img src="https://media.giphy.com/media/oymRV1UYQWLFNM78Xe/giphy.gif" alt="letsgo"></p><h3 id="1-安裝套件"><a href="#1-安裝套件" class="headerlink" title="1. 安裝套件"></a>1. 安裝套件</h3><p>看了一下 Node.js 連接 ODBC的 相關套件<br>這套是到近期都還有有維持更新的，因此採用<br><a href="https://github.com/markdirish/node-odbc/" target="_blank" rel="noopener">node-odbc</a></p><pre><code class="Bash">npm install odbc</code></pre><h3 id="2-設定連接"><a href="#2-設定連接" class="headerlink" title="2. 設定連接"></a>2. 設定連接</h3><p>官方範例</p><pre><code class="JavaScript">const odbc = require(&#39;odbc&#39;);async function connectToDatabase() {    const connection1 = await odbc.connect(&#39;DSN=MYDSN&#39;);    // connection1 is now an open Connection    // or using a configuration object    const connectionConfig = {        connectionString: &#39;DSN=MYDSN&#39;,        connectionTimeout: 10,        loginTimeout: 10,    }    const connection2 = await odbc.connect(connectionConfig);    // connection2 is now an open Connection}connectToDatabase();</code></pre><p>這邊比較要注意的是<br><code>connectionString: &#39;DSN=MYDSN&#39;</code><br>這個<code>DSN</code>就是<code>Data Source Name</code><br>如果是按照上一篇的範例，我們是取名為<code>impalaodbc</code><br>所以會長這樣</p><pre><code class="JavaScript">const connectionConfig = {      connectionString: &#39;DSN=impalaodbc&#39;,      connectionTimeout: 10,      loginTimeout: 10,    }</code></pre><h3 id="3-執行-Query"><a href="#3-執行-Query" class="headerlink" title="3. 執行 Query"></a>3. 執行 Query</h3><p>執行 Query、Pool 可以在官方文件上查詢 API 與範例<br>這個套件的官方文件 API 寫得蠻清楚的<br><a href="https://github.com/markdirish/node-odbc/#api" target="_blank" rel="noopener">主要可以在上面看</a><br>但是值得注意的是<br><strong>Impala 的欄位名稱是不分大小寫的</strong><br><strong>Impala 的欄位名稱是不分大小寫的</strong><br><strong>Impala 的欄位名稱是不分大小寫的</strong></p><blockquote><p>Impala identifiers are always case-insensitive. That is, tables named t1 and T1 always refer to the same table, regardless of quote characters. Internally, Impala always folds all specified table and column names to lowercase. This is why the column headers in query output are always displayed in lowercase.<br><a href="https://docs.cloudera.com/documentation/enterprise/5-5-x/topics/impala_identifiers.html" target="_blank" rel="noopener">官方文件說明</a></p></blockquote><p>像我是從<code>MySQL</code>轉移過來的就會遇到問題<br>所以我寫了一個取代欄位名稱的 Function<br>第一個參數是從<code>Impala</code>撈回來的資料<br>第二個參數則是你希望取代的欄位名稱<br>例如: <code>[&#39;Id&#39;, &#39;InfoDate&#39;, &#39;ColName&#39;, &#39;Something&#39;...]</code><br>直接取代每一個物件的<code>key</code></p><pre><code class="JavaScript">function toCaseSensitiveKeys(result, newKeys) {  // make keys array to keys object  const replacements = {};  if (newKeys !== undefined) {    newKeys.forEach(key =&gt; {      replacements[key.toLowerCase()] = key;    })  }  // pair keys by replacements object  const data = result.map(row =&gt; {    const replacedItems = Object.keys(row).map(key =&gt; {      const newKey = replacements[key] || key;      return { [newKey]: row[key] };    })    const newResult = replacedItems.reduce((a, b) =&gt; Object.assign({}, a, b));    return newResult;  });  return data;}</code></pre><p>最後的 Query Function </p><pre><code class="JavaScript">const impalaQuery = (sql, values, newKeys) =&gt; {  return new Promise((resolve, reject) =&gt; {    // Create Connection Pool    const connectionConfig = {      connectionString: &#39;DSN=impalaodbc&#39;,      connectionTimeout: 10,      loginTimeout: 10,    }    odbc.connect(connectionConfig, (conError, connection) =&gt; {      if (conError) {        reject(conError);      }      connection.query(sql, values, (err, rows) =&gt; {        if (err) {          // If execute SQL faild, print SQL          connection.createStatement((error1, statement) =&gt; {            if (error1) { console.log(error1, statement); return; } // handle            statement.prepare(sql, (error2) =&gt; {              if (error2) { console.log(error2, statement); return; } // handle              statement.bind(values, (error3) =&gt; {                if (error3) { console.log(error3, statement); return; } // handle              });            });          });          reject(err);        }        else {          const idx = rows.indexOf(&#39;statement&#39;)          const values = rows.slice(0, idx).map((e, i) =&gt; {            return e          })          const data = toCaseSensitiveKeys(values, newKeys);          // print SQL          console.log(rows[&#39;statement&#39;]);          resolve(data);        }      });    });  });};</code></pre><p>主要是加入了</p><ol><li>錯誤時透過階段來偵錯</li><li>印出執行的SQL</li><li>轉換大小寫 </li></ol><p>在其他地方就可以這樣使用</p><pre><code class="JavaScript">const sql = &#39;yourSQL&#39;;const values = [SomeParms...];const keys = [SomeColNames...];impalaQuery(sql, values, keys)    .then(results =&gt; {        res.status(200).json(results);    })    .catch(err =&gt; {        console.log(err);        res.status(500).send(&#39;DB Error&#39;);    });</code></pre><p><strong>這次的<code>在Node.JS透過ODBC連接Impala</code>就大功告成啦!</strong><br>其實蠻費工的，寫這篇文時也回顧了不少苦難<br>希望可以幫助到有同樣需求的人~<br><img src="https://media.giphy.com/media/oOX5qIDkzDjeo/giphy.gif" alt="cry_laugh"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Node-JS透過ODBC連接Impala完整教學-下&quot;&gt;&lt;a href=&quot;#在Node-JS透過ODBC連接Impala完整教學-下&quot; class=&quot;headerlink&quot; title=&quot;在Node.JS透過ODBC連接Impala完整教學(下)&quot;&gt;&lt;/a&gt;在
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
      <category term="impala" scheme="https://huskylin.github.io/tags/impala/"/>
    
      <category term="ubuntu" scheme="https://huskylin.github.io/tags/ubuntu/"/>
    
      <category term="hadoop" scheme="https://huskylin.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>在Node.JS透過ODBC連接impala完整教學(上)</title>
    <link href="https://huskylin.github.io/2020/06/15/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8A/"/>
    <id>https://huskylin.github.io/2020/06/15/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8A/</id>
    <published>2020-06-15T10:00:22.000Z</published>
    <updated>2020-06-28T09:13:14.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Node-JS透過ODBC連接Impala完整教學-上"><a href="#在Node-JS透過ODBC連接Impala完整教學-上" class="headerlink" title="在Node.JS透過ODBC連接Impala完整教學(上)"></a>在Node.JS透過ODBC連接Impala完整教學(上)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>原本專案的後端，在開發階段時採用<code>Node.js</code>連接<code>MySQL</code><br>結果後來到部屬階段時要改連接到<code>impala</code><br><strong>原本以為是小事一樁，後來採坑連連</strong><br>於是產生了本篇筆記<br><img src="https://media.giphy.com/media/JEVqknUonZJWU/giphy.gif" alt="crying"></p><h2 id="初始想法-node-impala-套件"><a href="#初始想法-node-impala-套件" class="headerlink" title="初始想法 node-impala 套件"></a>初始想法 node-impala 套件</h2><p>一開始看到 npm 裡面已經有人做好套件了<br>連接範例看起來也蠻簡潔的<br>就直接採用 <a href="https://www.npmjs.com/package/node-impala" target="_blank" rel="noopener">node-impala</a><br>測試後的確也蠻快就能夠連上並且撈取資料<br>但是!!<br>過很久之後才發現<br><strong>他的query一次最多回傳1024筆結果!</strong><br><strong>他的query一次最多回傳1024筆結果!</strong><br><strong>他的query一次最多回傳1024筆結果!</strong></p><p>看了issue後才發現<br>是因為底層使用<code>Beeswax</code>來連接，這是<code>Beeswax</code>的限制無法改變</p><blockquote><p>Beeswax limits the query result. It is not possible to increase the size by setting <em>fetch_size</em> <a href="https://github.com/ufukomer/node-impala/blob/master/src/thrift/beeswax.thrift#L129" target="_blank" rel="noopener">here</a>. Let’s use the <strong>HiveServer2</strong> #4. 🙈</p></blockquote><p><a href="https://github.com/ufukomer/node-impala/issues/11#issuecomment-274798646" target="_blank" rel="noopener">原討論串</a></p><p>煎熬了一陣子後決定直接放棄另尋他路</p><h2 id="解法-ODBC"><a href="#解法-ODBC" class="headerlink" title="解法 ODBC"></a>解法 ODBC</h2><p>後來找到的方法是在系統環境下先裝好 ODBC 來連接 Impala<br>後端 Node.js 再去連 ODBC<br>我們的作業系統環境是使用<code>Ubuntu 18.04</code><br>所以接下來就是有兩個步驟要執行</p><ol><li>在 Ubuntu 上安裝 ODBC Driver</li><li>在 Node.js 上連接到 Ubuntu 上的 ODBC</li></ol><h2 id="步驟一，在-Ubuntu-上安裝-ODBC-Driver"><a href="#步驟一，在-Ubuntu-上安裝-ODBC-Driver" class="headerlink" title="步驟一，在 Ubuntu 上安裝 ODBC Driver"></a>步驟一，在 Ubuntu 上安裝 ODBC Driver</h2><h3 id="1-下載安裝包"><a href="#1-下載安裝包" class="headerlink" title="1. 下載安裝包"></a>1. 下載安裝包</h3><p><a href="https://www.cloudera.com/downloads/connectors/impala/odbc/2-6-10.html" target="_blank" rel="noopener">cloudera下載連結</a><br><a href="https://docs.cloudera.com/documentation/other/connectors/impala-odbc/latest/Cloudera-ODBC-Driver-for-Impala-Install-Guide.pdf#%5B%7B%22num%22%3A218%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C78%2C729.75%2C0%5D" target="_blank" rel="noopener">Cloudera ODBC Driver for Impala 官方文件說明</a></p><h3 id="2-設定環境變數"><a href="#2-設定環境變數" class="headerlink" title="2. 設定環境變數"></a>2. 設定環境變數</h3><pre><code class="Bash">export LD_LIBRARY_PATH=/usr/local/lib:/opt/cloudera/impalaodbc/lib/64export CLOUDERAIMPALAINI=/opt/cloudera/impalaodbc/lib/64/cloudera.impalaodbc.iniexport LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libodbcinst.soexport ODBCINI=/etc/odbc.iniexport ODBCSYSINI=/etc</code></pre><h3 id="3-設定-ODBC-driver-的參數檔"><a href="#3-設定-ODBC-driver-的參數檔" class="headerlink" title="3. 設定 ODBC driver 的參數檔"></a>3. 設定 ODBC driver 的參數檔</h3><p>大致上長這樣<br>比較需要注意的地方是</p><ol><li><code>[impalaodbc]</code> 這是你自己要取的 Data Source Name</li><li><code>PORT</code>要注意一下是21050還是21000</li><li>`Drive‵路徑</li><li>帳號密碼、DB位置等等<br>其他都是預設值而已，自行參考變化即可</li></ol><pre><code class="Bash">[impalaodbc]# Description: DSN Description. This key is not necessary and is only to give a description of the data# source.Description=Cloudera ODBC Driver for Impala (64-bit) DSN# Driver: The location where the ODBC driver is installed to.Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so# The DriverUnicodeEncoding setting is only used for SimbaDM When set to 1, SimbaDM runs in UTF-16 mode. When#set to 2, SimbaDM runs in UTF-8 mode. DriverUnicodeEncoding=2# Values for HOST, PORT, KrbFQDN, and KrbServiceName should be set here. They can also be specified on the# connection string.HOST=Impala Server的IP位置PORT=21050Database=DB名稱# The authentication mechanism. 0 - no authentication. 1 - Kerberos authentication 2 - Username# authentication. 3 - Username/password authentication. 4 - Username/password authentication with SSL.AuthMech=0# Kerberos related settings.KrbFQDN=KrbRealm=KrbServiceName=# Username/password authentication with SSL settings.UID=DB帳號PWD=DB密碼CAIssuedCertNamesMismatch=1TrustedCerts=/opt/cloudera/impalaodbc/lib/64/cacerts.pem# Specify the proxy user ID to use. DelegationUID=# General settingsTSaslTransportBufSize=1000RowsFetchedPerBlock=1000SocketTimeout=0</code></pre><h3 id="4-安裝-unixODBC"><a href="#4-安裝-unixODBC" class="headerlink" title="4. 安裝 unixODBC"></a>4. 安裝 unixODBC</h3><pre><code class="Bash">sudo apt-get install unixODBC unixODBC-dev</code></pre><h3 id="5-測試"><a href="#5-測試" class="headerlink" title="5. 測試"></a>5. 測試</h3><ol><li>查看你的ODBC設定<pre><code class="Bash"> odbcinst -q -s</code></pre> 如果成功的話應該會顯示你的 Data Source Name</li><li>測試連線<pre><code class="Bash"> isql -v impalaodbc</code></pre> 如果成功的話應該會顯示你的連線後介面</li></ol><p><img src="https://i.imgur.com/gzoUbOp.png" alt=""></p><p>到這部分完成了在 Ubuntu 上安裝 ODBC Driver<br><strong>\ 恭喜恭喜 / \ 灑花灑花/</strong><br><img src="https://media.giphy.com/media/MhHXeM4SpKrpC/giphy.gif" alt="congrats"><br>喘口氣，下一篇再來講 步驟二 Node.js 的部分~</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol><li><a href="http://hadoop4beginner.blogspot.com/2015/05/installing-impala-odbc-driver-in-ubuntu.html" target="_blank" rel="noopener">Installing Impala ODBC Driver in Ubuntu 64 bit </a></li><li><a href="https://blog.csdn.net/yangzhaohui168/article/details/38800803" target="_blank" rel="noopener">Impala ODBC 安装笔记</a></li><li><a href="https://blog.csdn.net/ggz631047367/article/details/50703990" target="_blank" rel="noopener">ubuntu14.04配置impala的odbc连接</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Node-JS透過ODBC連接Impala完整教學-上&quot;&gt;&lt;a href=&quot;#在Node-JS透過ODBC連接Impala完整教學-上&quot; class=&quot;headerlink&quot; title=&quot;在Node.JS透過ODBC連接Impala完整教學(上)&quot;&gt;&lt;/a&gt;在
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
      <category term="impala" scheme="https://huskylin.github.io/tags/impala/"/>
    
      <category term="ubuntu" scheme="https://huskylin.github.io/tags/ubuntu/"/>
    
      <category term="hadoop" scheme="https://huskylin.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 18.04 離線狀態下安裝 MySQL</title>
    <link href="https://huskylin.github.io/2019/07/16/Ubuntu-Server-18-04-%E9%9B%A2%E7%B7%9A%E7%8B%80%E6%85%8B%E4%B8%8B%E5%AE%89%E8%A3%9D-MySQL/"/>
    <id>https://huskylin.github.io/2019/07/16/Ubuntu-Server-18-04-%E9%9B%A2%E7%B7%9A%E7%8B%80%E6%85%8B%E4%B8%8B%E5%AE%89%E8%A3%9D-MySQL/</id>
    <published>2019-07-16T03:35:15.000Z</published>
    <updated>2020-06-16T03:46:11.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline"><a href="#在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline" class="headerlink" title="在 Ubuntu Server 18.04 離線狀態下安裝 MySQL (Install MySQL on Ubuntu While Offline)"></a>在 Ubuntu Server 18.04 離線狀態下安裝 MySQL (Install MySQL on Ubuntu While Offline)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近一個專案遇到的情況，基於資安政策考量，規定機器不能連外部網路<br>這樣就不能直接使用<code>sudo apt-get install mysql-serve</code>來安裝<br>過程蠻不方便的，記錄一下給遇到同樣處境的人。<br>作法主要參考了這篇文章: <a href="https://www.cnblogs.com/JasonTech0713/p/6690949.html" target="_blank" rel="noopener">ubuntu16.04 安装离线 mysql5.7.17</a><br>但是<strong>MySQL 8.0 版本與以前的版本安裝步驟略有不同</strong>，會在以下內容中提到</p><hr><h2 id="準備安裝包"><a href="#準備安裝包" class="headerlink" title="準備安裝包"></a>準備安裝包</h2><h3 id="1-下載對應的-MySQL-安裝包"><a href="#1-下載對應的-MySQL-安裝包" class="headerlink" title="1. 下載對應的 MySQL 安裝包"></a>1. 下載對應的 MySQL 安裝包</h3><p>本文以<code>Ubuntu Linux 18.04 (x86, 64-bit), DEB Bundle</code>為例<br><img src="https://i.imgur.com/ZJVBRTi.png" alt="MySQL官網下載"></p><h3 id="2-準備-USB"><a href="#2-準備-USB" class="headerlink" title="2. 準備 USB"></a>2. 準備 USB</h3><p>檢查一下裡面包含這些檔案<br>把<code>mysql-server_8.0.16–2ubuntu18.04_amd64.deb-bundle.tar</code><br>放置到 USB 隨身碟裝置中<br><img src="https://i.imgur.com/5dEPbNl.png" alt="mysql-server-deb-bundle"></p><blockquote><p>註記: 這邊 USB 要先在 Ubuntu 環境中測試看看能不能用，有些需要重新格式化</p></blockquote><hr><h2 id="掛載-USB-隨身碟"><a href="#掛載-USB-隨身碟" class="headerlink" title="掛載 USB 隨身碟"></a>掛載 USB 隨身碟</h2><h3 id="1-先查-USB-隨身碟是被系統辨識成那個裝置"><a href="#1-先查-USB-隨身碟是被系統辨識成那個裝置" class="headerlink" title="1. 先查 USB 隨身碟是被系統辨識成那個裝置"></a>1. 先查 USB 隨身碟是被系統辨識成那個裝置</h3><p><code>fdisk -l</code><br>sda 很可能是硬碟,往下查容量可以找到隨身碟的編號<br>我們假設為 sdb<br><img src="https://i.imgur.com/fmLmCIO.png" alt=""></p><h3 id="2-建立-USB-隨身碟的掛載點："><a href="#2-建立-USB-隨身碟的掛載點：" class="headerlink" title="2. 建立 USB 隨身碟的掛載點："></a>2. 建立 USB 隨身碟的掛載點：</h3><p><code>mkdir /mnt/usb</code></p><h3 id="3-掛載-USB-隨身碟"><a href="#3-掛載-USB-隨身碟" class="headerlink" title="3. 掛載 USB 隨身碟"></a>3. 掛載 USB 隨身碟</h3><p><code>mount -v -t auto /dev/sdb /mnt/usb</code></p><blockquote><p>-v 顯示資訊<br>-t auto 讓系統自動分辯檔案系統</p></blockquote><h3 id="4-到-mnt-usb-可看到-usb-的內容"><a href="#4-到-mnt-usb-可看到-usb-的內容" class="headerlink" title="4. 到 /mnt/usb 可看到 usb 的內容"></a>4. 到 /mnt/usb 可看到 usb 的內容</h3><p>解壓縮後檢視一下檔案<br><img src="https://i.imgur.com/x2u701t.png" alt="USB掛載內容"></p><blockquote><p>註記: 檔名多一個(1)的部份是我有重新下載過<br>第一次下載時不知道是不是檔案有毀損，出現異常錯誤<br>如果有遇到也可以試試看重新下載</p></blockquote><hr><h2 id="開始安裝"><a href="#開始安裝" class="headerlink" title="開始安裝"></a>開始安裝</h2><h3 id="1-下載依賴的安裝包"><a href="#1-下載依賴的安裝包" class="headerlink" title="1. 下載依賴的安裝包"></a>1. 下載依賴的安裝包</h3><p>根據參考文章，還需要兩個額外依賴包，可以在這邊下載<br><a href="https://pkgs.org/download/libaio1" target="_blank" rel="noopener">https://pkgs.org/download/libaio1</a><br><a href="https://pkgs.org/download/libmecab2" target="_blank" rel="noopener">https://pkgs.org/download/libmecab2</a></p><h3 id="2-安裝-MySQL"><a href="#2-安裝-MySQL" class="headerlink" title="2. 安裝 MySQL"></a>2. 安裝 MySQL</h3><ol><li><code>sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg-preconfigure mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb</code><br><strong>(這步驟會跳出安裝畫面，並且需要輸入 root 密碼)</strong></li><li><code>sudo dpkg -i libmysqlclient21_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i libmysqlclient-dev_8.0.16–2ubuntu18.04_amd64.deb</code></li><li>參考文章中這一步是安裝<code>libmysqld-dev_5.7.16–1ubuntu16.04_amd64.deb</code><br>但是根據官方版本資訊，8.0 版本已經不需要這個檔案了，所以不需要做這個步驟<br><img src="https://i.imgur.com/Czreha1.png" alt="MySQL 8.0官方資訊"></li><li>參考文章中的這步驟是安裝<code>mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb</code><br>不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝<br><code>mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb</code><br>所以執行<br><code>sudo dpkg -i mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-client_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb</code></li><li>參考文章中的這步驟是安裝<code>mysql-community-server_8.0.16–2ubuntu18.04_amd64.de</code><br>不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝<br><code>mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb</code><br>所以執行<br><code>sudo dpkg -i mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-server_8.0.16–2ubuntu18.04_amd64.deb</code><br><strong>打完這一大坨指令後，就大功告成啦!</strong><br>最後可以去 MySQL 裡面試一下指令，確認安裝結果<br><code>mysql -u root -p</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline&quot;&gt;&lt;a href=&quot;#在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MyS
      
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="https://huskylin.github.io/tags/Ubuntu/"/>
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="MySQL" scheme="https://huskylin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Leaflet讀取GeoJSON檔</title>
    <link href="https://huskylin.github.io/2018/10/07/Leaflet%E8%AE%80%E5%8F%96GeoJSON%E6%AA%94/"/>
    <id>https://huskylin.github.io/2018/10/07/Leaflet%E8%AE%80%E5%8F%96GeoJSON%E6%AA%94/</id>
    <published>2018-10-07T10:00:22.000Z</published>
    <updated>2020-06-28T09:19:21.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leaflet-讀取-GeoJSON-檔"><a href="#Leaflet-讀取-GeoJSON-檔" class="headerlink" title="Leaflet 讀取 GeoJSON 檔"></a>Leaflet 讀取 GeoJSON 檔</h1><p>透過<br>在地圖上把台灣縣市地區框選起來<br>並且點擊後會有 popup 提示該地區的縣市名稱<br>練習 Leaflet 的一些操作</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>先照著官網教學<br>引入相關文件<br>把初始地圖建出來<br><a href="https://leafletjs.com/examples/quick-start/" target="_blank" rel="noopener">https://leafletjs.com/examples/quick-start/</a></p><pre><code class="JavaScript">//  建立 Leaflet 地圖var map = L.map(&quot;mapid&quot;);//  設定經緯度座標map.setView(new L.LatLng(25, 121.74739), 13);//  設定圖資來源var osmUrl = &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;;var osm = new L.TileLayer(osmUrl, { minZoom: 3, maxZoom: 16 });map.addLayer(osm);</code></pre><p><img src="https://i.imgur.com/e8jdeNm.png" alt=""></p><h2 id="讀入-GeoJSON-檔"><a href="#讀入-GeoJSON-檔" class="headerlink" title="讀入 GeoJSON 檔"></a>讀入 GeoJSON 檔</h2><p>根據<a href="https://noob.tw/openstreetmap/" target="_blank" rel="noopener">Web 視覺化(四)：建立 OpenStreetMap 地圖</a>提到</p><blockquote><p>Leaflet 無法直接讀取 GeoJSON 檔案，必須先透過 Ajax 等方式下載下來才行。這邊將使用 jQuery 做例子</p></blockquote><pre><code class="JavaScript">$.getJSON(&quot;YOURFILE.json&quot;, function (r) {  L.geoJSON(r, { color: &quot;#333&quot; }).addTo(map);});</code></pre><p>這樣就可以讀取 geoJSON</p><h2 id="替區塊著色"><a href="#替區塊著色" class="headerlink" title="替區塊著色"></a>替區塊著色</h2><p>希望讓不同區塊有不同顏色<br>這邊試做一個，把新北市著色</p><pre><code class="JavaScript">$.getJSON(&quot;taiwan.json&quot;, function (r) {  L.geoJSON(r, {    //  樣式可透過function操作    style: function (feature) {      if (feature.properties.COUNTYID == 65) {        console.log(feature.properties.NAME_2014);        return { color: &quot;#4f45c0&quot; };      } else {        return { color: &quot;#444444&quot; };      }    },    onEachFeature: onEachFeature,  }).addTo(map);});</code></pre><p><img src="https://i.imgur.com/VWeuBWb.png" alt=""></p><h2 id="點擊區塊彈出提示"><a href="#點擊區塊彈出提示" class="headerlink" title="點擊區塊彈出提示"></a>點擊區塊彈出提示</h2><p>這邊希望該縣市區塊後會彈出提示的視窗<br>這邊的 NAME_2014 是該資料中的 properties 有這個 NAME_2014 屬性<br>裡面是該縣市地區的名字</p><pre><code class="JavaScript">//  綁定每個feature做Popup，可以視資料有什麼properties來決定function onEachFeature(feature, layer) {  if (feature.properties &amp;&amp; feature.properties.NAME_2014) {    layer.bindPopup(feature.properties.NAME_2014);  }}</code></pre><p><img src="https://i.imgur.com/OIT3Ta1.png" alt=""></p><p>另外再加入官網範例中<br>點地圖的其他位置後<br>顯示座標位置</p><pre><code class="JavaScript">var popup = L.popup();function onMapClick(e) {  popup    .setLatLng(e.latlng)    .setContent(&quot;You clicked the map at &quot; + e.latlng.toString())    .openOn(map);}map.on(&quot;click&quot;, onMapClick);</code></pre><p><img src="https://i.imgur.com/HT8HW9s.png" alt=""></p><h2 id="其他延伸"><a href="#其他延伸" class="headerlink" title="其他延伸"></a>其他延伸</h2><p>如果想要自己繪製<br>可以使用<a href="http://geojson.io" target="_blank" rel="noopener">geojson.io</a>的服務</p><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><p><a href="https://sheethub.com/ronnywang/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E7%B8%A3%E5%B8%82" target="_blank" rel="noopener">中華民國縣市的 geojson 檔</a><br><a href="https://leafletjs.com/examples/geojson/" target="_blank" rel="noopener">Leaflet 對 GeoJSON 的官方說明</a><br><a href="https://www.youtube.com/watch?v=fDfkjx-VhLI&list=PL4TUtpN0YlFK3YRuJIS0KIxalBGJ4eqIR" target="_blank" rel="noopener">老外教學影片</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leaflet-讀取-GeoJSON-檔&quot;&gt;&lt;a href=&quot;#Leaflet-讀取-GeoJSON-檔&quot; class=&quot;headerlink&quot; title=&quot;Leaflet 讀取 GeoJSON 檔&quot;&gt;&lt;/a&gt;Leaflet 讀取 GeoJSON 檔&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Leaflet" scheme="https://huskylin.github.io/tags/Leaflet/"/>
    
      <category term="JavaScript" scheme="https://huskylin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS放大圖片會爆框</title>
    <link href="https://huskylin.github.io/2018/09/01/CSS%E6%94%BE%E5%A4%A7%E5%9C%96%E7%89%87%E6%9C%83%E7%88%86%E6%A1%86/"/>
    <id>https://huskylin.github.io/2018/09/01/CSS%E6%94%BE%E5%A4%A7%E5%9C%96%E7%89%87%E6%9C%83%E7%88%86%E6%A1%86/</id>
    <published>2018-09-01T10:08:02.000Z</published>
    <updated>2020-06-28T09:15:57.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h2><p>想要實作一個滑鼠放上去時會放大圖片簡單的效果<br>使用到的技巧</p><ol><li><code>:hover Selectors(選擇器)</code><br>用來選擇滑鼠指標經過在上面時的元素</li><li><code>transform: scale()</code><br>transform 屬性裡，用來縮放元素大小</li></ol><p>這兩個加起來就可以做出上述的效果<br>不過被選擇到放大後的圖片會爆出框框<br>這時候就需要加上<br><code>overflow: hidden</code><br>當超出邊界範圍時，將多餘的部分隱藏起來不顯示</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>原本以為到這邊就可以成功將效果呈現<br>但是卻發現會因為 padding 的間距<br>讓圖片放大的範圍有了”亂長大的空間”</p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>後來在圖片外面多包一個 div<br>並將 overflow: hidden 寫在裡面<br>文字與圖片間的 padding 就不會給圖片亂長大的空間了</p><pre><code class="CSS">.col-grid {  max-width: 450px;  overflow: hidden;  img {    max-width: 450px;    &amp;:hover {      transform: scale(1.1);      transition: 0.5s;    }  }}</code></pre><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>左邊為目標效果，右邊是有非預期爆框的效果<br><img src="https://i.imgur.com/Bt5K9qX.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初步想法&quot;&gt;&lt;a href=&quot;#初步想法&quot; class=&quot;headerlink&quot; title=&quot;初步想法&quot;&gt;&lt;/a&gt;初步想法&lt;/h2&gt;&lt;p&gt;想要實作一個滑鼠放上去時會放大圖片簡單的效果&lt;br&gt;使用到的技巧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:hover Sel
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://huskylin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用Python打造FB抽獎機，將回覆留言也列入參抽獎單</title>
    <link href="https://huskylin.github.io/2018/05/13/%E7%94%A8Python%E6%89%93%E9%80%A0FB%E6%8A%BD%E7%8D%8E%E6%A9%9F%EF%BC%8C%E5%B0%87%E5%9B%9E%E8%A6%86%E7%95%99%E8%A8%80%E4%B9%9F%E5%88%97%E5%85%A5%E5%8F%83%E6%8A%BD%E7%8D%8E%E5%96%AE/"/>
    <id>https://huskylin.github.io/2018/05/13/%E7%94%A8Python%E6%89%93%E9%80%A0FB%E6%8A%BD%E7%8D%8E%E6%A9%9F%EF%BC%8C%E5%B0%87%E5%9B%9E%E8%A6%86%E7%95%99%E8%A8%80%E4%B9%9F%E5%88%97%E5%85%A5%E5%8F%83%E6%8A%BD%E7%8D%8E%E5%96%AE/</id>
    <published>2018-05-13T10:11:47.000Z</published>
    <updated>2020-06-14T11:23:50.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>最近在臉書上參加活動需要朋友們按讚<br>我就辦了個抽獎讓大家參與<br>搜尋一下線上工具<br>搜尋結果前幾個似乎都無法免費支援<code>個人頁面的抽獎</code></p><h2 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h2><p>剛好之前看到<a href="https://www.facebook.com/pycone2016/" target="_blank" rel="noopener">Pycone 松果城市</a>有相關的教學影片<br>看上去不會太複雜，就照著實作一次了</p><p>前就如影片所示</p><iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fpycone2016%2Fvideos%2F1848676842125769%2F&show_text=0&width=560" width="560" height="315" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"></iframe><ol><li>取得 Post 的 ID</li><li>Facebook Graph API</li><li>取得 Token (存取權杖)</li><li>拿到資料</li></ol><p>不過做到中間發現<br><img src="https://i.imgur.com/vWJcVqx.jpg" alt="FaceBook_API_JSON"></p><ol><li>這個教學也是做給<code>粉絲團</code>使用的</li><li>我希望讓留言中回覆的人也加入名單</li></ol><p>所以需要修改一下</p><hr><h2 id="取得留言的回覆"><a href="#取得留言的回覆" class="headerlink" title="取得留言的回覆"></a>取得留言的回覆</h2><p>由於 Facebook 的巢狀留言結構<br>每個留言也都有各自獨立的 ID<br>要一一抓取有點麻煩<br>這邊直接在語法的地方使用</p><p><code>filter=stream</code></p><p>讓它變成資料流，就會全部展開來了</p><p>另外如果留言數太多的話<br>還要加上 limit<br>否則有些會顯示不出來<br>想要全部顯，就給一個超過總留言數的數量即可</p><p><code>limit=1000</code></p><p>最後的語法為</p><p><code>&lt;Your_Post_ID&gt;/comments?filter=stream&amp;limit=1000</code></p><p>最後取得資料後再利用 SET 去除重複名單，亂數排序後印出<br>就可以完成了</p><p><a href="https://github.com/huskylin/FB-lottery" target="_blank" rel="noopener">完整的程式碼</a><br>短短幾行就可以完成了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h2&gt;&lt;p&gt;最近在臉書上參加活動需要朋友們按讚&lt;br&gt;我就辦了個抽獎讓大家參與&lt;br&gt;搜尋一下線上工具&lt;br&gt;搜尋結果前幾個似乎都無法免費支援&lt;code
      
    
    </summary>
    
    
    
      <category term="Python" scheme="https://huskylin.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
