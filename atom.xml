<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工程師都是中二病</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huskylin.github.io/"/>
  <updated>2020-06-17T14:52:57.020Z</updated>
  <id>https://huskylin.github.io/</id>
  
  <author>
    <name>huksylin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Node.JS透過ODBC連接impala完整教學(下)</title>
    <link href="https://huskylin.github.io/2020/06/17/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8B/"/>
    <id>https://huskylin.github.io/2020/06/17/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8B/</id>
    <published>2020-06-17T10:00:22.000Z</published>
    <updated>2020-06-17T14:52:57.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Node-JS透過ODBC連接Impala完整教學-下"><a href="#在Node-JS透過ODBC連接Impala完整教學-下" class="headerlink" title="在Node.JS透過ODBC連接Impala完整教學(下)"></a>在Node.JS透過ODBC連接Impala完整教學(下)</h1><h2 id="步驟二，在-Node-js-上連接到-Ubuntu-上的-ODBC"><a href="#步驟二，在-Node-js-上連接到-Ubuntu-上的-ODBC" class="headerlink" title="步驟二，在 Node.js 上連接到 Ubuntu 上的 ODBC"></a>步驟二，在 Node.js 上連接到 Ubuntu 上的 ODBC</h2><p>上一篇完成了<code>在 Ubuntu 上安裝 ODBC Driver</code>的部分<br>接下來就是透過 Node.js來連接啦<br><img src="https://media.giphy.com/media/oymRV1UYQWLFNM78Xe/giphy.gif" alt="letsgo"></p><h3 id="1-安裝套件"><a href="#1-安裝套件" class="headerlink" title="1. 安裝套件"></a>1. 安裝套件</h3><p>看了一下 Node.js 連接 ODBC的 相關套件<br>這套是到近期都還有有維持更新的，因此採用<br><a href="https://github.com/markdirish/node-odbc/" target="_blank" rel="noopener">node-odbc</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install odbc</span><br></pre></td></tr></table></figure><h3 id="2-設定連接"><a href="#2-設定連接" class="headerlink" title="2. 設定連接"></a>2. 設定連接</h3><p>官方範例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odbc = <span class="built_in">require</span>(<span class="string">'odbc'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">connectToDatabase</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connection1 = <span class="keyword">await</span> odbc.connect(<span class="string">'DSN=MYDSN'</span>);</span><br><span class="line">    <span class="comment">// connection1 is now an open Connection</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// or using a configuration object</span></span><br><span class="line">    <span class="keyword">const</span> connectionConfig = &#123;</span><br><span class="line">        connectionString: <span class="string">'DSN=MYDSN'</span>,</span><br><span class="line">        connectionTimeout: <span class="number">10</span>,</span><br><span class="line">        loginTimeout: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> connection2 = <span class="keyword">await</span> odbc.connect(connectionConfig);</span><br><span class="line">    <span class="comment">// connection2 is now an open Connection</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connectToDatabase();</span><br></pre></td></tr></table></figure><p>這邊比較要注意的是<br><code>connectionString: &#39;DSN=MYDSN&#39;</code><br>這個<code>DSN</code>就是<code>Data Source Name</code><br>如果是按照上一篇的範例，我們是取名為<code>impalaodbc</code><br>所以會長這樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connectionConfig = &#123;</span><br><span class="line">      connectionString: <span class="string">'DSN=impalaodbc'</span>,</span><br><span class="line">      connectionTimeout: <span class="number">10</span>,</span><br><span class="line">      loginTimeout: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-執行-Query"><a href="#3-執行-Query" class="headerlink" title="3. 執行 Query"></a>3. 執行 Query</h3><p>執行 Query、Pool 可以在官方文件上查詢 API 與範例<br>這個套件的官方文件 API 寫得蠻清楚的<br><a href="https://github.com/markdirish/node-odbc/#api" target="_blank" rel="noopener">主要可以在上面看</a><br>但是值得注意的是<br><strong>Impala 的欄位名稱是不分大小寫的</strong><br><strong>Impala 的欄位名稱是不分大小寫的</strong><br><strong>Impala 的欄位名稱是不分大小寫的</strong></p><blockquote><p>Impala identifiers are always case-insensitive. That is, tables named t1 and T1 always refer to the same table, regardless of quote characters. Internally, Impala always folds all specified table and column names to lowercase. This is why the column headers in query output are always displayed in lowercase.<br><a href="https://docs.cloudera.com/documentation/enterprise/5-5-x/topics/impala_identifiers.html" target="_blank" rel="noopener">官方文件說明</a></p></blockquote><p>像我是從<code>MySQL</code>轉移過來的就會遇到問題<br>所以我寫了一個取代欄位名稱的 Function<br>第一個參數是從<code>Impala</code>撈回來的資料<br>第二個參數則是你希望取代的欄位名稱<br>例如: <code>[&#39;Id&#39;, &#39;InfoDate&#39;, &#39;ColName&#39;, &#39;Something&#39;...]</code><br>直接取代每一個物件的<code>key</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCaseSensitiveKeys</span>(<span class="params">result, newKeys</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// make keys array to keys object</span></span><br><span class="line">  <span class="keyword">const</span> replacements = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (newKeys !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    newKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      replacements[key.toLowerCase()] = key;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// pair keys by replacements object</span></span><br><span class="line">  <span class="keyword">const</span> data = result.map(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> replacedItems = <span class="built_in">Object</span>.keys(row).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = replacements[key] || key;</span><br><span class="line">      <span class="keyword">return</span> &#123; [newKey]: row[key] &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> newResult = replacedItems.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, a, b));</span><br><span class="line">    <span class="keyword">return</span> newResult;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後的 Query Function </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> impalaQuery = <span class="function">(<span class="params">sql, values, newKeys</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Create Connection Pool</span></span><br><span class="line">    <span class="keyword">const</span> connectionConfig = &#123;</span><br><span class="line">      connectionString: <span class="string">'DSN=impalaodbc'</span>,</span><br><span class="line">      connectionTimeout: <span class="number">10</span>,</span><br><span class="line">      loginTimeout: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    odbc.connect(connectionConfig, (conError, connection) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (conError) &#123;</span><br><span class="line">        reject(conError);</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query(sql, values, (err, rows) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// If execute SQL faild, print SQL</span></span><br><span class="line">          connection.createStatement(<span class="function">(<span class="params">error1, statement</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error1) &#123; <span class="built_in">console</span>.log(error1, statement); <span class="keyword">return</span>; &#125; <span class="comment">// handle</span></span><br><span class="line">            statement.prepare(sql, (error2) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (error2) &#123; <span class="built_in">console</span>.log(error2, statement); <span class="keyword">return</span>; &#125; <span class="comment">// handle</span></span><br><span class="line">              statement.bind(values, (error3) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (error3) &#123; <span class="built_in">console</span>.log(error3, statement); <span class="keyword">return</span>; &#125; <span class="comment">// handle</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> idx = rows.indexOf(<span class="string">'statement'</span>)</span><br><span class="line">          <span class="keyword">const</span> values = rows.slice(<span class="number">0</span>, idx).map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">const</span> data = toCaseSensitiveKeys(values, newKeys);</span><br><span class="line">          <span class="comment">// print SQL</span></span><br><span class="line">          <span class="built_in">console</span>.log(rows[<span class="string">'statement'</span>]);</span><br><span class="line">          resolve(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要是加入了</p><ol><li>錯誤時透過階段來偵錯</li><li>印出執行的SQL</li><li>轉換大小寫 </li></ol><p>在其他地方就可以這樣使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">'yourSQL'</span>;</span><br><span class="line"><span class="keyword">const</span> values = [SomeParms...];</span><br><span class="line"><span class="keyword">const</span> keys = [SomeColNames...];</span><br><span class="line">impalaQuery(sql, values, keys)</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).json(results);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        res.status(<span class="number">500</span>).send(<span class="string">'DB Error'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>這次的<code>在Node.JS透過ODBC連接Impala</code>就大功告成啦!</strong><br>其實蠻費工的，寫這篇文時也回顧了不少苦難<br>希望可以幫助到有同樣需求的人~<br><img src="https://media.giphy.com/media/oOX5qIDkzDjeo/giphy.gif" alt="cry_laugh"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Node-JS透過ODBC連接Impala完整教學-下&quot;&gt;&lt;a href=&quot;#在Node-JS透過ODBC連接Impala完整教學-下&quot; class=&quot;headerlink&quot; title=&quot;在Node.JS透過ODBC連接Impala完整教學(下)&quot;&gt;&lt;/a&gt;在
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
      <category term="impala" scheme="https://huskylin.github.io/tags/impala/"/>
    
      <category term="ubuntu" scheme="https://huskylin.github.io/tags/ubuntu/"/>
    
      <category term="hadoop" scheme="https://huskylin.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>在Node.JS透過ODBC連接impala完整教學(上)</title>
    <link href="https://huskylin.github.io/2020/06/15/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8A/"/>
    <id>https://huskylin.github.io/2020/06/15/%E5%9C%A8Node-JS%E9%80%8F%E9%81%8EODBC%E9%80%A3%E6%8E%A5Impala%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-%E4%B8%8A/</id>
    <published>2020-06-15T10:00:22.000Z</published>
    <updated>2020-06-17T14:52:28.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Node-JS透過ODBC連接Impala完整教學-上"><a href="#在Node-JS透過ODBC連接Impala完整教學-上" class="headerlink" title="在Node.JS透過ODBC連接Impala完整教學(上)"></a>在Node.JS透過ODBC連接Impala完整教學(上)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>原本專案的後端，在開發階段時採用<code>Node.js</code>連接<code>MySQL</code><br>結果後來到部屬階段時要改連接到<code>impala</code><br><strong>原本以為是小事一樁，後來採坑連連</strong><br>於是產生了本篇筆記<br><img src="https://media.giphy.com/media/JEVqknUonZJWU/giphy.gif" alt="crying"></p><h2 id="初始想法-node-impala-套件"><a href="#初始想法-node-impala-套件" class="headerlink" title="初始想法 node-impala 套件"></a>初始想法 node-impala 套件</h2><p>一開始看到 npm 裡面已經有人做好套件了<br>連接範例看起來也蠻簡潔的<br>就直接採用 <a href="https://www.npmjs.com/package/node-impala" target="_blank" rel="noopener">node-impala</a><br>測試後的確也蠻快就能夠連上並且撈取資料<br>但是!!<br>過很久之後才發現<br><strong>他的query一次最多回傳1024筆結果!</strong><br><strong>他的query一次最多回傳1024筆結果!</strong><br><strong>他的query一次最多回傳1024筆結果!</strong></p><p>看了issue後才發現<br>是因為底層使用<code>Beeswax</code>來連接，這是<code>Beeswax</code>的限制無法改變</p><blockquote><p>Beeswax limits the query result. It is not possible to increase the size by setting <em>fetch_size</em> <a href="https://github.com/ufukomer/node-impala/blob/master/src/thrift/beeswax.thrift#L129" target="_blank" rel="noopener">here</a>. Let’s use the <strong>HiveServer2</strong> #4. 🙈</p></blockquote><p><a href="https://github.com/ufukomer/node-impala/issues/11#issuecomment-274798646" target="_blank" rel="noopener">原討論串</a></p><p>煎熬了一陣子後決定直接放棄另尋他路</p><h2 id="解法-ODBC"><a href="#解法-ODBC" class="headerlink" title="解法 ODBC"></a>解法 ODBC</h2><p>後來找到的方法是在系統環境下先裝好 ODBC 來連接 Impala<br>後端 Node.js 再去連 ODBC<br>我們的作業系統環境是使用<code>Ubuntu 18.04</code><br>所以接下來就是有兩個步驟要執行</p><ol><li>在 Ubuntu 上安裝 ODBC Driver</li><li>在 Node.js 上連接到 Ubuntu 上的 ODBC</li></ol><h2 id="步驟一，在-Ubuntu-上安裝-ODBC-Driver"><a href="#步驟一，在-Ubuntu-上安裝-ODBC-Driver" class="headerlink" title="步驟一，在 Ubuntu 上安裝 ODBC Driver"></a>步驟一，在 Ubuntu 上安裝 ODBC Driver</h2><h3 id="1-下載安裝包"><a href="#1-下載安裝包" class="headerlink" title="1. 下載安裝包"></a>1. 下載安裝包</h3><p><a href="https://www.cloudera.com/downloads/connectors/impala/odbc/2-6-10.html" target="_blank" rel="noopener">cloudera下載連結</a><br><a href="https://docs.cloudera.com/documentation/other/connectors/impala-odbc/latest/Cloudera-ODBC-Driver-for-Impala-Install-Guide.pdf#%5B%7B%22num%22%3A218%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C78%2C729.75%2C0%5D" target="_blank" rel="noopener">Cloudera ODBC Driver for Impala 官方文件說明</a></p><h3 id="2-設定環境變數"><a href="#2-設定環境變數" class="headerlink" title="2. 設定環境變數"></a>2. 設定環境變數</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib:/opt/cloudera/impalaodbc/lib/64</span><br><span class="line"><span class="built_in">export</span> CLOUDERAIMPALAINI=/opt/cloudera/impalaodbc/lib/64/cloudera.impalaodbc.ini</span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libodbcinst.so</span><br><span class="line"><span class="built_in">export</span> ODBCINI=/etc/odbc.ini</span><br><span class="line"><span class="built_in">export</span> ODBCSYSINI=/etc</span><br></pre></td></tr></table></figure><h3 id="3-設定-ODBC-driver-的參數檔"><a href="#3-設定-ODBC-driver-的參數檔" class="headerlink" title="3. 設定 ODBC driver 的參數檔"></a>3. 設定 ODBC driver 的參數檔</h3><p>大致上長這樣<br>比較需要注意的地方是</p><ol><li><code>[impalaodbc]</code> 這是你自己要取的 Data Source Name</li><li><code>PORT</code>要注意一下是21050還是21000</li><li>`Drive‵路徑</li><li>帳號密碼、DB位置等等<br>其他都是預設值而已，自行參考變化即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[impalaodbc]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Description: DSN Description. This key is not necessary and is only to give a description of the data</span></span><br><span class="line"><span class="comment"># source.</span></span><br><span class="line">Description=Cloudera ODBC Driver <span class="keyword">for</span> Impala (64-bit) DSN</span><br><span class="line"></span><br><span class="line"><span class="comment"># Driver: The location where the ODBC driver is installed to.</span></span><br><span class="line">Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># The DriverUnicodeEncoding setting is only used for SimbaDM When set to 1, SimbaDM runs in UTF-16 mode. When</span></span><br><span class="line"><span class="comment">#set to 2, SimbaDM runs in UTF-8 mode. DriverUnicodeEncoding=2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Values for HOST, PORT, KrbFQDN, and KrbServiceName should be set here. They can also be specified on the</span></span><br><span class="line"><span class="comment"># connection string.</span></span><br><span class="line">HOST=Impala Server的IP位置</span><br><span class="line">PORT=21050</span><br><span class="line">Database=DB名稱</span><br><span class="line"></span><br><span class="line"><span class="comment"># The authentication mechanism. 0 - no authentication. 1 - Kerberos authentication 2 - Username</span></span><br><span class="line"><span class="comment"># authentication. 3 - Username/password authentication. 4 - Username/password authentication with SSL.</span></span><br><span class="line">AuthMech=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kerberos related settings.</span></span><br><span class="line">KrbFQDN=</span><br><span class="line">KrbRealm=</span><br><span class="line">KrbServiceName=</span><br><span class="line"></span><br><span class="line"><span class="comment"># Username/password authentication with SSL settings.</span></span><br><span class="line">UID=DB帳號</span><br><span class="line">PWD=DB密碼</span><br><span class="line">CAIssuedCertNamesMismatch=1</span><br><span class="line">TrustedCerts=/opt/cloudera/impalaodbc/lib/64/cacerts.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the proxy user ID to use. DelegationUID=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># General settings</span></span><br><span class="line">TSaslTransportBufSize=1000</span><br><span class="line">RowsFetchedPerBlock=1000</span><br><span class="line">SocketTimeout=0</span><br></pre></td></tr></table></figure><h3 id="4-安裝-unixODBC"><a href="#4-安裝-unixODBC" class="headerlink" title="4. 安裝 unixODBC"></a>4. 安裝 unixODBC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unixODBC unixODBC-dev</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-測試"><a href="#5-測試" class="headerlink" title="5. 測試"></a>5. 測試</h3><ol><li>查看你的ODBC設定 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odbcinst -q -s</span><br></pre></td></tr></table></figure> 如果成功的話應該會顯示你的 Data Source Name</li><li>測試連線 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isql -v impalaodbc</span><br></pre></td></tr></table></figure> 如果成功的話應該會顯示你的連線後介面</li></ol><p><img src="https://i.imgur.com/gzoUbOp.png" alt=""></p><p>到這部分完成了在 Ubuntu 上安裝 ODBC Driver<br><strong>\ 恭喜恭喜 / \ 灑花灑花/</strong><br><img src="https://media.giphy.com/media/MhHXeM4SpKrpC/giphy.gif" alt="congrats"><br>喘口氣，下一篇再來講 步驟二 Node.js 的部分~</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol><li><a href="http://hadoop4beginner.blogspot.com/2015/05/installing-impala-odbc-driver-in-ubuntu.html" target="_blank" rel="noopener">Installing Impala ODBC Driver in Ubuntu 64 bit </a></li><li><a href="https://blog.csdn.net/yangzhaohui168/article/details/38800803" target="_blank" rel="noopener">Impala ODBC 安装笔记</a></li><li><a href="https://blog.csdn.net/ggz631047367/article/details/50703990" target="_blank" rel="noopener">ubuntu14.04配置impala的odbc连接</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Node-JS透過ODBC連接Impala完整教學-上&quot;&gt;&lt;a href=&quot;#在Node-JS透過ODBC連接Impala完整教學-上&quot; class=&quot;headerlink&quot; title=&quot;在Node.JS透過ODBC連接Impala完整教學(上)&quot;&gt;&lt;/a&gt;在
      
    
    </summary>
    
    
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="Node.js" scheme="https://huskylin.github.io/tags/Node-js/"/>
    
      <category term="impala" scheme="https://huskylin.github.io/tags/impala/"/>
    
      <category term="ubuntu" scheme="https://huskylin.github.io/tags/ubuntu/"/>
    
      <category term="hadoop" scheme="https://huskylin.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 18.04 離線狀態下安裝 MySQL</title>
    <link href="https://huskylin.github.io/2019/07/16/Ubuntu-Server-18-04-%E9%9B%A2%E7%B7%9A%E7%8B%80%E6%85%8B%E4%B8%8B%E5%AE%89%E8%A3%9D-MySQL/"/>
    <id>https://huskylin.github.io/2019/07/16/Ubuntu-Server-18-04-%E9%9B%A2%E7%B7%9A%E7%8B%80%E6%85%8B%E4%B8%8B%E5%AE%89%E8%A3%9D-MySQL/</id>
    <published>2019-07-16T03:35:15.000Z</published>
    <updated>2020-06-16T03:46:11.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline"><a href="#在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline" class="headerlink" title="在 Ubuntu Server 18.04 離線狀態下安裝 MySQL (Install MySQL on Ubuntu While Offline)"></a>在 Ubuntu Server 18.04 離線狀態下安裝 MySQL (Install MySQL on Ubuntu While Offline)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近一個專案遇到的情況，基於資安政策考量，規定機器不能連外部網路<br>這樣就不能直接使用<code>sudo apt-get install mysql-serve</code>來安裝<br>過程蠻不方便的，記錄一下給遇到同樣處境的人。<br>作法主要參考了這篇文章: <a href="https://www.cnblogs.com/JasonTech0713/p/6690949.html" target="_blank" rel="noopener">ubuntu16.04 安装离线 mysql5.7.17</a><br>但是<strong>MySQL 8.0 版本與以前的版本安裝步驟略有不同</strong>，會在以下內容中提到</p><hr><h2 id="準備安裝包"><a href="#準備安裝包" class="headerlink" title="準備安裝包"></a>準備安裝包</h2><h3 id="1-下載對應的-MySQL-安裝包"><a href="#1-下載對應的-MySQL-安裝包" class="headerlink" title="1. 下載對應的 MySQL 安裝包"></a>1. 下載對應的 MySQL 安裝包</h3><p>本文以<code>Ubuntu Linux 18.04 (x86, 64-bit), DEB Bundle</code>為例<br><img src="https://i.imgur.com/ZJVBRTi.png" alt="MySQL官網下載"></p><h3 id="2-準備-USB"><a href="#2-準備-USB" class="headerlink" title="2. 準備 USB"></a>2. 準備 USB</h3><p>檢查一下裡面包含這些檔案<br>把<code>mysql-server_8.0.16–2ubuntu18.04_amd64.deb-bundle.tar</code><br>放置到 USB 隨身碟裝置中<br><img src="https://i.imgur.com/5dEPbNl.png" alt="mysql-server-deb-bundle"></p><blockquote><p>註記: 這邊 USB 要先在 Ubuntu 環境中測試看看能不能用，有些需要重新格式化</p></blockquote><hr><h2 id="掛載-USB-隨身碟"><a href="#掛載-USB-隨身碟" class="headerlink" title="掛載 USB 隨身碟"></a>掛載 USB 隨身碟</h2><h3 id="1-先查-USB-隨身碟是被系統辨識成那個裝置"><a href="#1-先查-USB-隨身碟是被系統辨識成那個裝置" class="headerlink" title="1. 先查 USB 隨身碟是被系統辨識成那個裝置"></a>1. 先查 USB 隨身碟是被系統辨識成那個裝置</h3><p><code>fdisk -l</code><br>sda 很可能是硬碟,往下查容量可以找到隨身碟的編號<br>我們假設為 sdb<br><img src="https://i.imgur.com/fmLmCIO.png" alt=""></p><h3 id="2-建立-USB-隨身碟的掛載點："><a href="#2-建立-USB-隨身碟的掛載點：" class="headerlink" title="2. 建立 USB 隨身碟的掛載點："></a>2. 建立 USB 隨身碟的掛載點：</h3><p><code>mkdir /mnt/usb</code></p><h3 id="3-掛載-USB-隨身碟"><a href="#3-掛載-USB-隨身碟" class="headerlink" title="3. 掛載 USB 隨身碟"></a>3. 掛載 USB 隨身碟</h3><p><code>mount -v -t auto /dev/sdb /mnt/usb</code></p><blockquote><p>-v 顯示資訊<br>-t auto 讓系統自動分辯檔案系統</p></blockquote><h3 id="4-到-mnt-usb-可看到-usb-的內容"><a href="#4-到-mnt-usb-可看到-usb-的內容" class="headerlink" title="4. 到 /mnt/usb 可看到 usb 的內容"></a>4. 到 /mnt/usb 可看到 usb 的內容</h3><p>解壓縮後檢視一下檔案<br><img src="https://i.imgur.com/x2u701t.png" alt="USB掛載內容"></p><blockquote><p>註記: 檔名多一個(1)的部份是我有重新下載過<br>第一次下載時不知道是不是檔案有毀損，出現異常錯誤<br>如果有遇到也可以試試看重新下載</p></blockquote><hr><h2 id="開始安裝"><a href="#開始安裝" class="headerlink" title="開始安裝"></a>開始安裝</h2><h3 id="1-下載依賴的安裝包"><a href="#1-下載依賴的安裝包" class="headerlink" title="1. 下載依賴的安裝包"></a>1. 下載依賴的安裝包</h3><p>根據參考文章，還需要兩個額外依賴包，可以在這邊下載<br><a href="https://pkgs.org/download/libaio1" target="_blank" rel="noopener">https://pkgs.org/download/libaio1</a><br><a href="https://pkgs.org/download/libmecab2" target="_blank" rel="noopener">https://pkgs.org/download/libmecab2</a></p><h3 id="2-安裝-MySQL"><a href="#2-安裝-MySQL" class="headerlink" title="2. 安裝 MySQL"></a>2. 安裝 MySQL</h3><ol><li><code>sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg-preconfigure mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb</code><br><strong>(這步驟會跳出安裝畫面，並且需要輸入 root 密碼)</strong></li><li><code>sudo dpkg -i libmysqlclient21_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i libmysqlclient-dev_8.0.16–2ubuntu18.04_amd64.deb</code></li><li>參考文章中這一步是安裝<code>libmysqld-dev_5.7.16–1ubuntu16.04_amd64.deb</code><br>但是根據官方版本資訊，8.0 版本已經不需要這個檔案了，所以不需要做這個步驟<br><img src="https://i.imgur.com/Czreha1.png" alt="MySQL 8.0官方資訊"></li><li>參考文章中的這步驟是安裝<code>mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb</code><br>不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝<br><code>mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb</code><br>所以執行<br><code>sudo dpkg -i mysql-community-client-core_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-community-client_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-client_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-common_8.0.16–2ubuntu18.04_amd64.deb</code></li><li>參考文章中的這步驟是安裝<code>mysql-community-server_8.0.16–2ubuntu18.04_amd64.de</code><br>不過如果直接安裝會跳出錯誤，顯示缺少依賴，所以在這 8.0 中需要先安裝<br><code>mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb</code><br>所以執行<br><code>sudo dpkg -i mysql-community-server-core_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-community-server_8.0.16–2ubuntu18.04_amd64.deb</code></li><li><code>sudo dpkg -i mysql-server_8.0.16–2ubuntu18.04_amd64.deb</code><br><strong>打完這一大坨指令後，就大功告成啦!</strong><br>最後可以去 MySQL 裡面試一下指令，確認安裝結果<br><code>mysql -u root -p</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MySQL-on-Ubuntu-While-Offline&quot;&gt;&lt;a href=&quot;#在-Ubuntu-Server-18-04-離線狀態下安裝-MySQL-Install-MyS
      
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="https://huskylin.github.io/tags/Ubuntu/"/>
    
      <category term="部屬" scheme="https://huskylin.github.io/tags/%E9%83%A8%E5%B1%AC/"/>
    
      <category term="MySQL" scheme="https://huskylin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Leaflet讀取GeoJSON檔</title>
    <link href="https://huskylin.github.io/2018/10/07/Leaflet%E8%AE%80%E5%8F%96GeoJSON%E6%AA%94/"/>
    <id>https://huskylin.github.io/2018/10/07/Leaflet%E8%AE%80%E5%8F%96GeoJSON%E6%AA%94/</id>
    <published>2018-10-07T10:00:22.000Z</published>
    <updated>2020-06-14T10:12:53.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leaflet-讀取-GeoJSON-檔"><a href="#Leaflet-讀取-GeoJSON-檔" class="headerlink" title="Leaflet 讀取 GeoJSON 檔"></a>Leaflet 讀取 GeoJSON 檔</h1><p>透過<br>在地圖上把台灣縣市地區框選起來<br>並且點擊後會有 popup 提示該地區的縣市名稱<br>練習 Leaflet 的一些操作</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>先照著官網教學<br>引入相關文件<br>把初始地圖建出來<br><a href="https://leafletjs.com/examples/quick-start/" target="_blank" rel="noopener">https://leafletjs.com/examples/quick-start/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  建立 Leaflet 地圖</span></span><br><span class="line"><span class="keyword">var</span> map = L.map(<span class="string">"mapid"</span>);</span><br><span class="line"><span class="comment">//  設定經緯度座標</span></span><br><span class="line">map.setView(<span class="keyword">new</span> L.LatLng(<span class="number">25</span>, <span class="number">121.74739</span>), <span class="number">13</span>);</span><br><span class="line"><span class="comment">//  設定圖資來源</span></span><br><span class="line"><span class="keyword">var</span> osmUrl = <span class="string">"https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png"</span>;</span><br><span class="line"><span class="keyword">var</span> osm = <span class="keyword">new</span> L.TileLayer(osmUrl, &#123; <span class="attr">minZoom</span>: <span class="number">3</span>, <span class="attr">maxZoom</span>: <span class="number">16</span> &#125;);</span><br><span class="line">map.addLayer(osm);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/e8jdeNm.png" alt=""></p><h2 id="讀入-GeoJSON-檔"><a href="#讀入-GeoJSON-檔" class="headerlink" title="讀入 GeoJSON 檔"></a>讀入 GeoJSON 檔</h2><p>根據<a href="https://noob.tw/openstreetmap/" target="_blank" rel="noopener">Web 視覺化(四)：建立 OpenStreetMap 地圖</a>提到</p><blockquote><p>Leaflet 無法直接讀取 GeoJSON 檔案，必須先透過 Ajax 等方式下載下來才行。這邊將使用 jQuery 做例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(<span class="string">"YOURFILE.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">  L.geoJSON(r, &#123; <span class="attr">color</span>: <span class="string">"#333"</span> &#125;).addTo(map);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這樣就可以讀取 geoJSON</p><h2 id="替區塊著色"><a href="#替區塊著色" class="headerlink" title="替區塊著色"></a>替區塊著色</h2><p>希望讓不同區塊有不同顏色<br>這邊試做一個，把新北市著色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(<span class="string">"taiwan.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">  L.geoJSON(r, &#123;</span><br><span class="line">    <span class="comment">//  樣式可透過function操作</span></span><br><span class="line">    style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (feature.properties.COUNTYID == <span class="number">65</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(feature.properties.NAME_2014);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">color</span>: <span class="string">"#4f45c0"</span> &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">color</span>: <span class="string">"#444444"</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onEachFeature: onEachFeature,</span><br><span class="line">  &#125;).addTo(map);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/VWeuBWb.png" alt=""></p><h2 id="點擊區塊彈出提示"><a href="#點擊區塊彈出提示" class="headerlink" title="點擊區塊彈出提示"></a>點擊區塊彈出提示</h2><p>這邊希望該縣市區塊後會彈出提示的視窗<br>這邊的 NAME_2014 是該資料中的 properties 有這個 NAME_2014 屬性<br>裡面是該縣市地區的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  綁定每個feature做Popup，可以視資料有什麼properties來決定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onEachFeature</span>(<span class="params">feature, layer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (feature.properties &amp;&amp; feature.properties.NAME_2014) &#123;</span><br><span class="line">    layer.bindPopup(feature.properties.NAME_2014);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OIT3Ta1.png" alt=""></p><p>另外再加入官網範例中<br>點地圖的其他位置後<br>顯示座標位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> popup = L.popup();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMapClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  popup</span><br><span class="line">    .setLatLng(e.latlng)</span><br><span class="line">    .setContent(<span class="string">"You clicked the map at "</span> + e.latlng.toString())</span><br><span class="line">    .openOn(map);</span><br><span class="line">&#125;</span><br><span class="line">map.on(<span class="string">"click"</span>, onMapClick);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HT8HW9s.png" alt=""></p><h2 id="其他延伸"><a href="#其他延伸" class="headerlink" title="其他延伸"></a>其他延伸</h2><p>如果想要自己繪製<br>可以使用<a href="http://geojson.io" target="_blank" rel="noopener">geojson.io</a>的服務</p><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><p><a href="https://sheethub.com/ronnywang/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E7%B8%A3%E5%B8%82" target="_blank" rel="noopener">中華民國縣市的 geojson 檔</a><br><a href="https://leafletjs.com/examples/geojson/" target="_blank" rel="noopener">Leaflet 對 GeoJSON 的官方說明</a><br><a href="https://www.youtube.com/watch?v=fDfkjx-VhLI&list=PL4TUtpN0YlFK3YRuJIS0KIxalBGJ4eqIR" target="_blank" rel="noopener">老外教學影片</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leaflet-讀取-GeoJSON-檔&quot;&gt;&lt;a href=&quot;#Leaflet-讀取-GeoJSON-檔&quot; class=&quot;headerlink&quot; title=&quot;Leaflet 讀取 GeoJSON 檔&quot;&gt;&lt;/a&gt;Leaflet 讀取 GeoJSON 檔&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Leaflet" scheme="https://huskylin.github.io/tags/Leaflet/"/>
    
      <category term="JavaScript" scheme="https://huskylin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS放大圖片會爆框</title>
    <link href="https://huskylin.github.io/2018/09/01/CSS%E6%94%BE%E5%A4%A7%E5%9C%96%E7%89%87%E6%9C%83%E7%88%86%E6%A1%86/"/>
    <id>https://huskylin.github.io/2018/09/01/CSS%E6%94%BE%E5%A4%A7%E5%9C%96%E7%89%87%E6%9C%83%E7%88%86%E6%A1%86/</id>
    <published>2018-09-01T10:08:02.000Z</published>
    <updated>2020-06-14T10:12:43.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h2><p>想要實作一個滑鼠放上去時會放大圖片簡單的效果<br>使用到的技巧</p><ol><li><code>:hover Selectors(選擇器)</code><br>用來選擇滑鼠指標經過在上面時的元素</li><li><code>transform: scale()</code><br>transform 屬性裡，用來縮放元素大小</li></ol><p>這兩個加起來就可以做出上述的效果<br>不過被選擇到放大後的圖片會爆出框框<br>這時候就需要加上<br><code>overflow: hidden</code><br>當超出邊界範圍時，將多餘的部分隱藏起來不顯示</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>原本以為到這邊就可以成功將效果呈現<br>但是卻發現會因為 padding 的間距<br>讓圖片放大的範圍有了”亂長大的空間”</p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>後來在圖片外面多包一個 div<br>並將 overflow: hidden 寫在裡面<br>文字與圖片間的 padding 就不會給圖片亂長大的空間了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-grid</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  img &#123;</span><br><span class="line">    <span class="selector-tag">max-width</span>: 450<span class="selector-tag">px</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">      <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>左邊為目標效果，右邊是有非預期爆框的效果<br><img src="https://i.imgur.com/Bt5K9qX.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初步想法&quot;&gt;&lt;a href=&quot;#初步想法&quot; class=&quot;headerlink&quot; title=&quot;初步想法&quot;&gt;&lt;/a&gt;初步想法&lt;/h2&gt;&lt;p&gt;想要實作一個滑鼠放上去時會放大圖片簡單的效果&lt;br&gt;使用到的技巧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:hover Sel
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://huskylin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用Python打造FB抽獎機，將回覆留言也列入參抽獎單</title>
    <link href="https://huskylin.github.io/2018/05/13/%E7%94%A8Python%E6%89%93%E9%80%A0FB%E6%8A%BD%E7%8D%8E%E6%A9%9F%EF%BC%8C%E5%B0%87%E5%9B%9E%E8%A6%86%E7%95%99%E8%A8%80%E4%B9%9F%E5%88%97%E5%85%A5%E5%8F%83%E6%8A%BD%E7%8D%8E%E5%96%AE/"/>
    <id>https://huskylin.github.io/2018/05/13/%E7%94%A8Python%E6%89%93%E9%80%A0FB%E6%8A%BD%E7%8D%8E%E6%A9%9F%EF%BC%8C%E5%B0%87%E5%9B%9E%E8%A6%86%E7%95%99%E8%A8%80%E4%B9%9F%E5%88%97%E5%85%A5%E5%8F%83%E6%8A%BD%E7%8D%8E%E5%96%AE/</id>
    <published>2018-05-13T10:11:47.000Z</published>
    <updated>2020-06-14T11:23:50.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>最近在臉書上參加活動需要朋友們按讚<br>我就辦了個抽獎讓大家參與<br>搜尋一下線上工具<br>搜尋結果前幾個似乎都無法免費支援<code>個人頁面的抽獎</code></p><h2 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h2><p>剛好之前看到<a href="https://www.facebook.com/pycone2016/" target="_blank" rel="noopener">Pycone 松果城市</a>有相關的教學影片<br>看上去不會太複雜，就照著實作一次了</p><p>前就如影片所示</p><iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fpycone2016%2Fvideos%2F1848676842125769%2F&show_text=0&width=560" width="560" height="315" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"></iframe><ol><li>取得 Post 的 ID</li><li>Facebook Graph API</li><li>取得 Token (存取權杖)</li><li>拿到資料</li></ol><p>不過做到中間發現<br><img src="https://i.imgur.com/vWJcVqx.jpg" alt="FaceBook_API_JSON"></p><ol><li>這個教學也是做給<code>粉絲團</code>使用的</li><li>我希望讓留言中回覆的人也加入名單</li></ol><p>所以需要修改一下</p><hr><h2 id="取得留言的回覆"><a href="#取得留言的回覆" class="headerlink" title="取得留言的回覆"></a>取得留言的回覆</h2><p>由於 Facebook 的巢狀留言結構<br>每個留言也都有各自獨立的 ID<br>要一一抓取有點麻煩<br>這邊直接在語法的地方使用</p><p><code>filter=stream</code></p><p>讓它變成資料流，就會全部展開來了</p><p>另外如果留言數太多的話<br>還要加上 limit<br>否則有些會顯示不出來<br>想要全部顯，就給一個超過總留言數的數量即可</p><p><code>limit=1000</code></p><p>最後的語法為</p><p><code>&lt;Your_Post_ID&gt;/comments?filter=stream&amp;limit=1000</code></p><p>最後取得資料後再利用 SET 去除重複名單，亂數排序後印出<br>就可以完成了</p><p><a href="https://github.com/huskylin/FB-lottery" target="_blank" rel="noopener">完整的程式碼</a><br>短短幾行就可以完成了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h2&gt;&lt;p&gt;最近在臉書上參加活動需要朋友們按讚&lt;br&gt;我就辦了個抽獎讓大家參與&lt;br&gt;搜尋一下線上工具&lt;br&gt;搜尋結果前幾個似乎都無法免費支援&lt;code
      
    
    </summary>
    
    
    
      <category term="Python" scheme="https://huskylin.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
